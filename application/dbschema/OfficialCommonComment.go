// @generated Do not edit this file, which is automatically generated by the generator.

package dbschema

import (
	"fmt"

	"time"

	"github.com/webx-top/com"
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/db/lib/factory/pagination"
	"github.com/webx-top/echo"
	"github.com/webx-top/echo/param"
)

type Slice_OfficialCommonComment []*OfficialCommonComment

func (s Slice_OfficialCommonComment) Range(fn func(m factory.Model) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_OfficialCommonComment) RangeRaw(fn func(m *OfficialCommonComment) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_OfficialCommonComment) GroupBy(keyField string) map[string][]*OfficialCommonComment {
	r := map[string][]*OfficialCommonComment{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*OfficialCommonComment{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (s Slice_OfficialCommonComment) KeyBy(keyField string) map[string]*OfficialCommonComment {
	r := map[string]*OfficialCommonComment{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (s Slice_OfficialCommonComment) AsKV(keyField string, valueField string) param.Store {
	r := param.Store{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (s Slice_OfficialCommonComment) Transform(transfers map[string]param.Transfer) []param.Store {
	r := make([]param.Store, len(s))
	for idx, row := range s {
		r[idx] = row.AsMap().Transform(transfers)
	}
	return r
}

func (s Slice_OfficialCommonComment) FromList(data interface{}) Slice_OfficialCommonComment {
	values, ok := data.([]*OfficialCommonComment)
	if !ok {
		for _, value := range data.([]interface{}) {
			row := &OfficialCommonComment{}
			row.FromRow(value.(map[string]interface{}))
			s = append(s, row)
		}
		return s
	}
	s = append(s, values...)

	return s
}

func NewOfficialCommonComment(ctx echo.Context) *OfficialCommonComment {
	m := &OfficialCommonComment{}
	m.SetContext(ctx)
	return m
}

// OfficialCommonComment 评论表
type OfficialCommonComment struct {
	base    factory.Base
	objects []*OfficialCommonComment

	Id              uint64 `db:"id,omitempty,pk" bson:"id,omitempty" comment:"ID" json:"id" xml:"id"`
	ReplyCommentId  uint64 `db:"reply_comment_id" bson:"reply_comment_id" comment:"回复评论ID" json:"reply_comment_id" xml:"reply_comment_id"`
	ReplyOwnerId    uint64 `db:"reply_owner_id" bson:"reply_owner_id" comment:"回复用户ID" json:"reply_owner_id" xml:"reply_owner_id"`
	ReplyOwnerType  string `db:"reply_owner_type" bson:"reply_owner_type" comment:"回复用户类型(customer-前台客户;user-后台用户)" json:"reply_owner_type" xml:"reply_owner_type"`
	RootId          uint64 `db:"root_id" bson:"root_id" comment:"根评论ID" json:"root_id" xml:"root_id"`
	TargetType      string `db:"target_type" bson:"target_type" comment:"评论目标类型(article,product...)" json:"target_type" xml:"target_type"`
	TargetSubtype   string `db:"target_subtype" bson:"target_subtype" comment:"评论目标子类型" json:"target_subtype" xml:"target_subtype"`
	TargetId        uint64 `db:"target_id" bson:"target_id" comment:"评论目标ID" json:"target_id" xml:"target_id"`
	TargetOwnerId   uint64 `db:"target_owner_id" bson:"target_owner_id" comment:"目标作者ID" json:"target_owner_id" xml:"target_owner_id"`
	TargetOwnerType string `db:"target_owner_type" bson:"target_owner_type" comment:"目标作者类型(customer-前台客户;user-后台用户)" json:"target_owner_type" xml:"target_owner_type"`
	OwnerId         uint64 `db:"owner_id" bson:"owner_id" comment:"评论者ID" json:"owner_id" xml:"owner_id"`
	OwnerType       string `db:"owner_type" bson:"owner_type" comment:"评论者类型(customer-前台客户;user-后台用户)" json:"owner_type" xml:"owner_type"`
	Content         string `db:"content" bson:"content" comment:"评论内容" json:"content" xml:"content"`
	Contype         string `db:"contype" bson:"contype" comment:"内容类型" json:"contype" xml:"contype"`
	Created         uint   `db:"created" bson:"created" comment:"创建时间" json:"created" xml:"created"`
	Updated         uint   `db:"updated" bson:"updated" comment:"编辑时间" json:"updated" xml:"updated"`
	Display         string `db:"display" bson:"display" comment:"显示" json:"display" xml:"display"`
	Level           uint   `db:"level" bson:"level" comment:"层数" json:"level" xml:"level"`
	Path            string `db:"path" bson:"path" comment:"路径" json:"path" xml:"path"`
	Replies         uint64 `db:"replies" bson:"replies" comment:"回复数" json:"replies" xml:"replies"`
	Likes           uint64 `db:"likes" bson:"likes" comment:"喜欢数量" json:"likes" xml:"likes"`
	Hates           uint64 `db:"hates" bson:"hates" comment:"不喜欢数量" json:"hates" xml:"hates"`
}

// - base function

func (a *OfficialCommonComment) Trans() factory.Transactioner {
	return a.base.Trans()
}

func (a *OfficialCommonComment) Use(trans factory.Transactioner) factory.Model {
	a.base.Use(trans)
	return a
}

func (a *OfficialCommonComment) SetContext(ctx echo.Context) factory.Model {
	a.base.SetContext(ctx)
	return a
}

func (a *OfficialCommonComment) EventON(on ...bool) factory.Model {
	a.base.EventON(on...)
	return a
}

func (a *OfficialCommonComment) EventOFF(off ...bool) factory.Model {
	a.base.EventOFF(off...)
	return a
}

func (a *OfficialCommonComment) Context() echo.Context {
	return a.base.Context()
}

func (a *OfficialCommonComment) SetConnID(connID int) factory.Model {
	a.base.SetConnID(connID)
	return a
}

func (a *OfficialCommonComment) ConnID() int {
	return a.base.ConnID()
}

func (a *OfficialCommonComment) SetNamer(namer func(factory.Model) string) factory.Model {
	a.base.SetNamer(namer)
	return a
}

func (a *OfficialCommonComment) Namer() func(factory.Model) string {
	return a.base.Namer()
}

func (a *OfficialCommonComment) SetParam(param *factory.Param) factory.Model {
	a.base.SetParam(param)
	return a
}

func (a *OfficialCommonComment) Param(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	if a.base.Param() == nil {
		return a.NewParam().SetMiddleware(mw).SetArgs(args...)
	}
	return a.base.Param().SetMiddleware(mw).SetArgs(args...)
}

func (a *OfficialCommonComment) New(structName string, connID ...int) factory.Model {
	return a.base.New(structName, connID...)
}

func (a *OfficialCommonComment) Base_() factory.Baser {
	return &a.base
}

// - current function

func (a *OfficialCommonComment) Objects() []*OfficialCommonComment {
	if a.objects == nil {
		return nil
	}
	return a.objects[:]
}

func (a *OfficialCommonComment) XObjects() Slice_OfficialCommonComment {
	return Slice_OfficialCommonComment(a.Objects())
}

func (a *OfficialCommonComment) NewObjects() factory.Ranger {
	return &Slice_OfficialCommonComment{}
}

func (a *OfficialCommonComment) InitObjects() *[]*OfficialCommonComment {
	a.objects = []*OfficialCommonComment{}
	return &a.objects
}

func (a *OfficialCommonComment) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(a.base.ConnID()).SetTrans(a.base.Trans()).SetCollection(a.Name_()).SetModel(a)
}

func (a *OfficialCommonComment) Short_() string {
	return "official_common_comment"
}

func (a *OfficialCommonComment) Struct_() string {
	return "OfficialCommonComment"
}

func (a *OfficialCommonComment) Name_() string {
	b := a
	if b == nil {
		b = &OfficialCommonComment{}
	}
	if b.base.Namer() != nil {
		return WithPrefix(b.base.Namer()(b))
	}
	return WithPrefix(factory.TableNamerGet(b.Short_())(b))
}

func (a *OfficialCommonComment) CPAFrom(source factory.Model) factory.Model {
	a.SetContext(source.Context())
	a.SetConnID(source.ConnID())
	a.SetNamer(source.Namer())
	return a
}

func (a *OfficialCommonComment) Get(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	base := a.base
	if !a.base.Eventable() {
		err = a.Param(mw, args...).SetRecv(a).One()
		a.base = base
		return
	}
	queryParam := a.Param(mw, args...).SetRecv(a)
	if err = DBI.FireReading(a, queryParam); err != nil {
		return
	}
	err = queryParam.One()
	a.base = base
	if err == nil {
		err = DBI.FireReaded(a, queryParam)
	}
	return
}

func (a *OfficialCommonComment) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*OfficialCommonComment:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialCommonComment(*v))
		case []*OfficialCommonComment:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialCommonComment(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *OfficialCommonComment) GroupBy(keyField string, inputRows ...[]*OfficialCommonComment) map[string][]*OfficialCommonComment {
	var rows Slice_OfficialCommonComment
	if len(inputRows) > 0 {
		rows = Slice_OfficialCommonComment(inputRows[0])
	} else {
		rows = Slice_OfficialCommonComment(a.Objects())
	}
	return rows.GroupBy(keyField)
}

func (a *OfficialCommonComment) KeyBy(keyField string, inputRows ...[]*OfficialCommonComment) map[string]*OfficialCommonComment {
	var rows Slice_OfficialCommonComment
	if len(inputRows) > 0 {
		rows = Slice_OfficialCommonComment(inputRows[0])
	} else {
		rows = Slice_OfficialCommonComment(a.Objects())
	}
	return rows.KeyBy(keyField)
}

func (a *OfficialCommonComment) AsKV(keyField string, valueField string, inputRows ...[]*OfficialCommonComment) param.Store {
	var rows Slice_OfficialCommonComment
	if len(inputRows) > 0 {
		rows = Slice_OfficialCommonComment(inputRows[0])
	} else {
		rows = Slice_OfficialCommonComment(a.Objects())
	}
	return rows.AsKV(keyField, valueField)
}

func (a *OfficialCommonComment) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*OfficialCommonComment:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialCommonComment(*v))
		case []*OfficialCommonComment:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialCommonComment(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *OfficialCommonComment) Insert() (pk interface{}, err error) {
	a.Created = uint(time.Now().Unix())
	a.Id = 0
	if len(a.ReplyOwnerType) == 0 {
		a.ReplyOwnerType = "customer"
	}
	if len(a.TargetType) == 0 {
		a.TargetType = "article"
	}
	if len(a.TargetOwnerType) == 0 {
		a.TargetOwnerType = "customer"
	}
	if len(a.OwnerType) == 0 {
		a.OwnerType = "customer"
	}
	if len(a.Contype) == 0 {
		a.Contype = "text"
	}
	if len(a.Display) == 0 {
		a.Display = "N"
	}
	if a.base.Eventable() {
		err = DBI.Fire("creating", a, nil)
		if err != nil {
			return
		}
	}
	pk, err = a.Param(nil).SetSend(a).Insert()
	if err == nil && pk != nil {
		if v, y := pk.(uint64); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint64(v)
		}
	}
	if err == nil && a.base.Eventable() {
		err = DBI.Fire("created", a, nil)
	}
	return
}

func (a *OfficialCommonComment) Update(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.ReplyOwnerType) == 0 {
		a.ReplyOwnerType = "customer"
	}
	if len(a.TargetType) == 0 {
		a.TargetType = "article"
	}
	if len(a.TargetOwnerType) == 0 {
		a.TargetOwnerType = "customer"
	}
	if len(a.OwnerType) == 0 {
		a.OwnerType = "customer"
	}
	if len(a.Contype) == 0 {
		a.Contype = "text"
	}
	if len(a.Display) == 0 {
		a.Display = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Update()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(a).Update(); err != nil {
		return
	}
	return DBI.Fire("updated", a, mw, args...)
}

func (a *OfficialCommonComment) Updatex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.ReplyOwnerType) == 0 {
		a.ReplyOwnerType = "customer"
	}
	if len(a.TargetType) == 0 {
		a.TargetType = "article"
	}
	if len(a.TargetOwnerType) == 0 {
		a.TargetOwnerType = "customer"
	}
	if len(a.OwnerType) == 0 {
		a.OwnerType = "customer"
	}
	if len(a.Contype) == 0 {
		a.Contype = "text"
	}
	if len(a.Display) == 0 {
		a.Display = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Updatex()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).SetSend(a).Updatex(); err != nil {
		return
	}
	err = DBI.Fire("updated", a, mw, args...)
	return
}

func (a *OfficialCommonComment) UpdateByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.ReplyOwnerType) == 0 {
		a.ReplyOwnerType = "customer"
	}
	if len(a.TargetType) == 0 {
		a.TargetType = "article"
	}
	if len(a.TargetOwnerType) == 0 {
		a.TargetOwnerType = "customer"
	}
	if len(a.OwnerType) == 0 {
		a.OwnerType = "customer"
	}
	if len(a.Contype) == 0 {
		a.Contype = "text"
	}
	if len(a.Display) == 0 {
		a.Display = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdateByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).UpdateByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *OfficialCommonComment) UpdatexByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (affected int64, err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.ReplyOwnerType) == 0 {
		a.ReplyOwnerType = "customer"
	}
	if len(a.TargetType) == 0 {
		a.TargetType = "article"
	}
	if len(a.TargetOwnerType) == 0 {
		a.TargetOwnerType = "customer"
	}
	if len(a.OwnerType) == 0 {
		a.OwnerType = "customer"
	}
	if len(a.Contype) == 0 {
		a.Contype = "text"
	}
	if len(a.Display) == 0 {
		a.Display = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdatexByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).UpdatexByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *OfficialCommonComment) UpdateField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (err error) {
	return a.UpdateFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *OfficialCommonComment) UpdatexField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (affected int64, err error) {
	return a.UpdatexFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *OfficialCommonComment) UpdateFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (err error) {

	if val, ok := kvset["reply_owner_type"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["reply_owner_type"] = "customer"
		}
	}
	if val, ok := kvset["target_type"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["target_type"] = "article"
		}
	}
	if val, ok := kvset["target_owner_type"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["target_owner_type"] = "customer"
		}
	}
	if val, ok := kvset["owner_type"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["owner_type"] = "customer"
		}
	}
	if val, ok := kvset["contype"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["contype"] = "text"
		}
	}
	if val, ok := kvset["display"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["display"] = "N"
		}
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(kvset).Update()
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(kvset).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, editColumns, mw, args...)
}

func (a *OfficialCommonComment) UpdatexFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (affected int64, err error) {

	if val, ok := kvset["reply_owner_type"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["reply_owner_type"] = "customer"
		}
	}
	if val, ok := kvset["target_type"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["target_type"] = "article"
		}
	}
	if val, ok := kvset["target_owner_type"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["target_owner_type"] = "customer"
		}
	}
	if val, ok := kvset["owner_type"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["owner_type"] = "customer"
		}
	}
	if val, ok := kvset["contype"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["contype"] = "text"
		}
	}
	if val, ok := kvset["display"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["display"] = "N"
		}
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(kvset).Updatex()
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).SetSend(kvset).Updatex(); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", &m, editColumns, mw, args...)
	return
}

func (a *OfficialCommonComment) UpdateValues(mw func(db.Result) db.Result, keysValues *db.KeysValues, args ...interface{}) (err error) {
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(keysValues).Update()
	}
	m := *a
	m.FromRow(keysValues.Map())
	if err = DBI.FireUpdate("updating", &m, keysValues.Keys(), mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(keysValues).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, keysValues.Keys(), mw, args...)
}

func (a *OfficialCommonComment) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = a.Param(mw, args...).SetSend(a).Upsert(func() error {
		a.Updated = uint(time.Now().Unix())
		if len(a.ReplyOwnerType) == 0 {
			a.ReplyOwnerType = "customer"
		}
		if len(a.TargetType) == 0 {
			a.TargetType = "article"
		}
		if len(a.TargetOwnerType) == 0 {
			a.TargetOwnerType = "customer"
		}
		if len(a.OwnerType) == 0 {
			a.OwnerType = "customer"
		}
		if len(a.Contype) == 0 {
			a.Contype = "text"
		}
		if len(a.Display) == 0 {
			a.Display = "N"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("updating", a, mw, args...)
	}, func() error {
		a.Created = uint(time.Now().Unix())
		a.Id = 0
		if len(a.ReplyOwnerType) == 0 {
			a.ReplyOwnerType = "customer"
		}
		if len(a.TargetType) == 0 {
			a.TargetType = "article"
		}
		if len(a.TargetOwnerType) == 0 {
			a.TargetOwnerType = "customer"
		}
		if len(a.OwnerType) == 0 {
			a.OwnerType = "customer"
		}
		if len(a.Contype) == 0 {
			a.Contype = "text"
		}
		if len(a.Display) == 0 {
			a.Display = "N"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("creating", a, nil)
	})
	if err == nil && pk != nil {
		if v, y := pk.(uint64); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint64(v)
		}
	}
	if err == nil && a.base.Eventable() {
		if pk == nil {
			err = DBI.Fire("updated", a, mw, args...)
		} else {
			err = DBI.Fire("created", a, nil)
		}
	}
	return
}

func (a *OfficialCommonComment) Delete(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Delete()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).Delete(); err != nil {
		return
	}
	return DBI.Fire("deleted", a, mw, args...)
}

func (a *OfficialCommonComment) Deletex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Deletex()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).Deletex(); err != nil {
		return
	}
	err = DBI.Fire("deleted", a, mw, args...)
	return
}

func (a *OfficialCommonComment) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return a.Param(mw, args...).Count()
}

func (a *OfficialCommonComment) Exists(mw func(db.Result) db.Result, args ...interface{}) (bool, error) {
	return a.Param(mw, args...).Exists()
}

func (a *OfficialCommonComment) Reset() *OfficialCommonComment {
	a.Id = 0
	a.ReplyCommentId = 0
	a.ReplyOwnerId = 0
	a.ReplyOwnerType = ``
	a.RootId = 0
	a.TargetType = ``
	a.TargetSubtype = ``
	a.TargetId = 0
	a.TargetOwnerId = 0
	a.TargetOwnerType = ``
	a.OwnerId = 0
	a.OwnerType = ``
	a.Content = ``
	a.Contype = ``
	a.Created = 0
	a.Updated = 0
	a.Display = ``
	a.Level = 0
	a.Path = ``
	a.Replies = 0
	a.Likes = 0
	a.Hates = 0
	return a
}

func (a *OfficialCommonComment) AsMap(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		r["Id"] = a.Id
		r["ReplyCommentId"] = a.ReplyCommentId
		r["ReplyOwnerId"] = a.ReplyOwnerId
		r["ReplyOwnerType"] = a.ReplyOwnerType
		r["RootId"] = a.RootId
		r["TargetType"] = a.TargetType
		r["TargetSubtype"] = a.TargetSubtype
		r["TargetId"] = a.TargetId
		r["TargetOwnerId"] = a.TargetOwnerId
		r["TargetOwnerType"] = a.TargetOwnerType
		r["OwnerId"] = a.OwnerId
		r["OwnerType"] = a.OwnerType
		r["Content"] = a.Content
		r["Contype"] = a.Contype
		r["Created"] = a.Created
		r["Updated"] = a.Updated
		r["Display"] = a.Display
		r["Level"] = a.Level
		r["Path"] = a.Path
		r["Replies"] = a.Replies
		r["Likes"] = a.Likes
		r["Hates"] = a.Hates
		return r
	}
	for _, field := range onlyFields {
		switch field {
		case "Id":
			r["Id"] = a.Id
		case "ReplyCommentId":
			r["ReplyCommentId"] = a.ReplyCommentId
		case "ReplyOwnerId":
			r["ReplyOwnerId"] = a.ReplyOwnerId
		case "ReplyOwnerType":
			r["ReplyOwnerType"] = a.ReplyOwnerType
		case "RootId":
			r["RootId"] = a.RootId
		case "TargetType":
			r["TargetType"] = a.TargetType
		case "TargetSubtype":
			r["TargetSubtype"] = a.TargetSubtype
		case "TargetId":
			r["TargetId"] = a.TargetId
		case "TargetOwnerId":
			r["TargetOwnerId"] = a.TargetOwnerId
		case "TargetOwnerType":
			r["TargetOwnerType"] = a.TargetOwnerType
		case "OwnerId":
			r["OwnerId"] = a.OwnerId
		case "OwnerType":
			r["OwnerType"] = a.OwnerType
		case "Content":
			r["Content"] = a.Content
		case "Contype":
			r["Contype"] = a.Contype
		case "Created":
			r["Created"] = a.Created
		case "Updated":
			r["Updated"] = a.Updated
		case "Display":
			r["Display"] = a.Display
		case "Level":
			r["Level"] = a.Level
		case "Path":
			r["Path"] = a.Path
		case "Replies":
			r["Replies"] = a.Replies
		case "Likes":
			r["Likes"] = a.Likes
		case "Hates":
			r["Hates"] = a.Hates
		}
	}
	return r
}

func (a *OfficialCommonComment) FromRow(row map[string]interface{}) {
	for key, value := range row {
		switch key {
		case "id":
			a.Id = param.AsUint64(value)
		case "reply_comment_id":
			a.ReplyCommentId = param.AsUint64(value)
		case "reply_owner_id":
			a.ReplyOwnerId = param.AsUint64(value)
		case "reply_owner_type":
			a.ReplyOwnerType = param.AsString(value)
		case "root_id":
			a.RootId = param.AsUint64(value)
		case "target_type":
			a.TargetType = param.AsString(value)
		case "target_subtype":
			a.TargetSubtype = param.AsString(value)
		case "target_id":
			a.TargetId = param.AsUint64(value)
		case "target_owner_id":
			a.TargetOwnerId = param.AsUint64(value)
		case "target_owner_type":
			a.TargetOwnerType = param.AsString(value)
		case "owner_id":
			a.OwnerId = param.AsUint64(value)
		case "owner_type":
			a.OwnerType = param.AsString(value)
		case "content":
			a.Content = param.AsString(value)
		case "contype":
			a.Contype = param.AsString(value)
		case "created":
			a.Created = param.AsUint(value)
		case "updated":
			a.Updated = param.AsUint(value)
		case "display":
			a.Display = param.AsString(value)
		case "level":
			a.Level = param.AsUint(value)
		case "path":
			a.Path = param.AsString(value)
		case "replies":
			a.Replies = param.AsUint64(value)
		case "likes":
			a.Likes = param.AsUint64(value)
		case "hates":
			a.Hates = param.AsUint64(value)
		}
	}
}

func (a *OfficialCommonComment) Set(key interface{}, value ...interface{}) {
	switch k := key.(type) {
	case map[string]interface{}:
		for kk, vv := range k {
			a.Set(kk, vv)
		}
	default:
		var (
			kk string
			vv interface{}
		)
		if k, y := key.(string); y {
			kk = k
		} else {
			kk = fmt.Sprint(key)
		}
		if len(value) > 0 {
			vv = value[0]
		}
		switch kk {
		case "Id":
			a.Id = param.AsUint64(vv)
		case "ReplyCommentId":
			a.ReplyCommentId = param.AsUint64(vv)
		case "ReplyOwnerId":
			a.ReplyOwnerId = param.AsUint64(vv)
		case "ReplyOwnerType":
			a.ReplyOwnerType = param.AsString(vv)
		case "RootId":
			a.RootId = param.AsUint64(vv)
		case "TargetType":
			a.TargetType = param.AsString(vv)
		case "TargetSubtype":
			a.TargetSubtype = param.AsString(vv)
		case "TargetId":
			a.TargetId = param.AsUint64(vv)
		case "TargetOwnerId":
			a.TargetOwnerId = param.AsUint64(vv)
		case "TargetOwnerType":
			a.TargetOwnerType = param.AsString(vv)
		case "OwnerId":
			a.OwnerId = param.AsUint64(vv)
		case "OwnerType":
			a.OwnerType = param.AsString(vv)
		case "Content":
			a.Content = param.AsString(vv)
		case "Contype":
			a.Contype = param.AsString(vv)
		case "Created":
			a.Created = param.AsUint(vv)
		case "Updated":
			a.Updated = param.AsUint(vv)
		case "Display":
			a.Display = param.AsString(vv)
		case "Level":
			a.Level = param.AsUint(vv)
		case "Path":
			a.Path = param.AsString(vv)
		case "Replies":
			a.Replies = param.AsUint64(vv)
		case "Likes":
			a.Likes = param.AsUint64(vv)
		case "Hates":
			a.Hates = param.AsUint64(vv)
		}
	}
}

func (a *OfficialCommonComment) AsRow(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		r["id"] = a.Id
		r["reply_comment_id"] = a.ReplyCommentId
		r["reply_owner_id"] = a.ReplyOwnerId
		r["reply_owner_type"] = a.ReplyOwnerType
		r["root_id"] = a.RootId
		r["target_type"] = a.TargetType
		r["target_subtype"] = a.TargetSubtype
		r["target_id"] = a.TargetId
		r["target_owner_id"] = a.TargetOwnerId
		r["target_owner_type"] = a.TargetOwnerType
		r["owner_id"] = a.OwnerId
		r["owner_type"] = a.OwnerType
		r["content"] = a.Content
		r["contype"] = a.Contype
		r["created"] = a.Created
		r["updated"] = a.Updated
		r["display"] = a.Display
		r["level"] = a.Level
		r["path"] = a.Path
		r["replies"] = a.Replies
		r["likes"] = a.Likes
		r["hates"] = a.Hates
		return r
	}
	for _, field := range onlyFields {
		switch field {
		case "id":
			r["id"] = a.Id
		case "reply_comment_id":
			r["reply_comment_id"] = a.ReplyCommentId
		case "reply_owner_id":
			r["reply_owner_id"] = a.ReplyOwnerId
		case "reply_owner_type":
			r["reply_owner_type"] = a.ReplyOwnerType
		case "root_id":
			r["root_id"] = a.RootId
		case "target_type":
			r["target_type"] = a.TargetType
		case "target_subtype":
			r["target_subtype"] = a.TargetSubtype
		case "target_id":
			r["target_id"] = a.TargetId
		case "target_owner_id":
			r["target_owner_id"] = a.TargetOwnerId
		case "target_owner_type":
			r["target_owner_type"] = a.TargetOwnerType
		case "owner_id":
			r["owner_id"] = a.OwnerId
		case "owner_type":
			r["owner_type"] = a.OwnerType
		case "content":
			r["content"] = a.Content
		case "contype":
			r["contype"] = a.Contype
		case "created":
			r["created"] = a.Created
		case "updated":
			r["updated"] = a.Updated
		case "display":
			r["display"] = a.Display
		case "level":
			r["level"] = a.Level
		case "path":
			r["path"] = a.Path
		case "replies":
			r["replies"] = a.Replies
		case "likes":
			r["likes"] = a.Likes
		case "hates":
			r["hates"] = a.Hates
		}
	}
	return r
}

func (a *OfficialCommonComment) ListPage(cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, nil, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *OfficialCommonComment) ListPageAs(recv interface{}, cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, recv, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *OfficialCommonComment) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = a.AsRow()
	}
	return DBI.Fields.BatchValidate(a.Short_(), kvset)
}

func (a *OfficialCommonComment) Validate(field string, value interface{}) error {
	return DBI.Fields.Validate(a.Short_(), field, value)
}
