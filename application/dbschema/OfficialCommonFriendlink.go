// @generated Do not edit this file, which is automatically generated by the generator.

package dbschema

import (
	"fmt"

	"time"

	"github.com/webx-top/com"
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/db/lib/factory/pagination"
	"github.com/webx-top/echo"
	"github.com/webx-top/echo/param"
)

type Slice_OfficialCommonFriendlink []*OfficialCommonFriendlink

func (s Slice_OfficialCommonFriendlink) Range(fn func(m factory.Model) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_OfficialCommonFriendlink) RangeRaw(fn func(m *OfficialCommonFriendlink) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_OfficialCommonFriendlink) GroupBy(keyField string) map[string][]*OfficialCommonFriendlink {
	r := map[string][]*OfficialCommonFriendlink{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*OfficialCommonFriendlink{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (s Slice_OfficialCommonFriendlink) KeyBy(keyField string) map[string]*OfficialCommonFriendlink {
	r := map[string]*OfficialCommonFriendlink{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (s Slice_OfficialCommonFriendlink) AsKV(keyField string, valueField string) param.Store {
	r := param.Store{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (s Slice_OfficialCommonFriendlink) Transform(transfers map[string]param.Transfer) []param.Store {
	r := make([]param.Store, len(s))
	for idx, row := range s {
		r[idx] = row.AsMap().Transform(transfers)
	}
	return r
}

func (s Slice_OfficialCommonFriendlink) FromList(data interface{}) Slice_OfficialCommonFriendlink {
	values, ok := data.([]*OfficialCommonFriendlink)
	if !ok {
		for _, value := range data.([]interface{}) {
			row := &OfficialCommonFriendlink{}
			row.FromRow(value.(map[string]interface{}))
			s = append(s, row)
		}
		return s
	}
	s = append(s, values...)

	return s
}

func NewOfficialCommonFriendlink(ctx echo.Context) *OfficialCommonFriendlink {
	m := &OfficialCommonFriendlink{}
	m.SetContext(ctx)
	return m
}

// OfficialCommonFriendlink 友情链接
type OfficialCommonFriendlink struct {
	base    factory.Base
	objects []*OfficialCommonFriendlink

	Id              uint   `db:"id,omitempty,pk" bson:"id,omitempty" comment:"ID" json:"id" xml:"id"`
	CategoryId      uint   `db:"category_id" bson:"category_id" comment:"分类" json:"category_id" xml:"category_id"`
	CustomerId      uint64 `db:"customer_id" bson:"customer_id" comment:"客户ID" json:"customer_id" xml:"customer_id"`
	Logo            string `db:"logo" bson:"logo" comment:"LOGO" json:"logo" xml:"logo"`
	LogoOriginal    string `db:"logo_original" bson:"logo_original" comment:"LOGO原图" json:"logo_original" xml:"logo_original"`
	Name            string `db:"name" bson:"name" comment:"网站名称" json:"name" xml:"name"`
	Description     string `db:"description" bson:"description" comment:"网站说明" json:"description" xml:"description"`
	Url             string `db:"url" bson:"url" comment:"网址" json:"url" xml:"url"`
	Host            string `db:"host" bson:"host" comment:"网址主机名(域名)" json:"host" xml:"host"`
	VerifyTime      uint   `db:"verify_time" bson:"verify_time" comment:"验证时间" json:"verify_time" xml:"verify_time"`
	VerifyFailCount uint   `db:"verify_fail_count" bson:"verify_fail_count" comment:"验证失败次数" json:"verify_fail_count" xml:"verify_fail_count"`
	VerifyResult    string `db:"verify_result" bson:"verify_result" comment:"验证结果(ok-成功;invalid-无效;none-未验证)" json:"verify_result" xml:"verify_result"`
	Process         string `db:"process" bson:"process" comment:"处理结果(idle-待处理;success-成功;reject-拒绝)" json:"process" xml:"process"`
	ProcessRemark   string `db:"process_remark" bson:"process_remark" comment:"处理备注" json:"process_remark" xml:"process_remark"`
	Created         uint   `db:"created" bson:"created" comment:"创建时间" json:"created" xml:"created"`
	Updated         uint   `db:"updated" bson:"updated" comment:"更新时间" json:"updated" xml:"updated"`
	ReturnTime      uint   `db:"return_time" bson:"return_time" comment:"回访时间" json:"return_time" xml:"return_time"`
	ReturnCount     uint   `db:"return_count" bson:"return_count" comment:"回访次数" json:"return_count" xml:"return_count"`
}

// - base function

func (a *OfficialCommonFriendlink) Trans() factory.Transactioner {
	return a.base.Trans()
}

func (a *OfficialCommonFriendlink) Use(trans factory.Transactioner) factory.Model {
	a.base.Use(trans)
	return a
}

func (a *OfficialCommonFriendlink) SetContext(ctx echo.Context) factory.Model {
	a.base.SetContext(ctx)
	return a
}

func (a *OfficialCommonFriendlink) EventON(on ...bool) factory.Model {
	a.base.EventON(on...)
	return a
}

func (a *OfficialCommonFriendlink) EventOFF(off ...bool) factory.Model {
	a.base.EventOFF(off...)
	return a
}

func (a *OfficialCommonFriendlink) Context() echo.Context {
	return a.base.Context()
}

func (a *OfficialCommonFriendlink) SetConnID(connID int) factory.Model {
	a.base.SetConnID(connID)
	return a
}

func (a *OfficialCommonFriendlink) ConnID() int {
	return a.base.ConnID()
}

func (a *OfficialCommonFriendlink) SetNamer(namer func(factory.Model) string) factory.Model {
	a.base.SetNamer(namer)
	return a
}

func (a *OfficialCommonFriendlink) Namer() func(factory.Model) string {
	return a.base.Namer()
}

func (a *OfficialCommonFriendlink) SetParam(param *factory.Param) factory.Model {
	a.base.SetParam(param)
	return a
}

func (a *OfficialCommonFriendlink) Param(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	if a.base.Param() == nil {
		return a.NewParam().SetMiddleware(mw).SetArgs(args...)
	}
	return a.base.Param().SetMiddleware(mw).SetArgs(args...)
}

func (a *OfficialCommonFriendlink) New(structName string, connID ...int) factory.Model {
	return a.base.New(structName, connID...)
}

func (a *OfficialCommonFriendlink) Base_() factory.Baser {
	return &a.base
}

// - current function

func (a *OfficialCommonFriendlink) Objects() []*OfficialCommonFriendlink {
	if a.objects == nil {
		return nil
	}
	return a.objects[:]
}

func (a *OfficialCommonFriendlink) XObjects() Slice_OfficialCommonFriendlink {
	return Slice_OfficialCommonFriendlink(a.Objects())
}

func (a *OfficialCommonFriendlink) NewObjects() factory.Ranger {
	return &Slice_OfficialCommonFriendlink{}
}

func (a *OfficialCommonFriendlink) InitObjects() *[]*OfficialCommonFriendlink {
	a.objects = []*OfficialCommonFriendlink{}
	return &a.objects
}

func (a *OfficialCommonFriendlink) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(a.base.ConnID()).SetTrans(a.base.Trans()).SetCollection(a.Name_()).SetModel(a)
}

func (a *OfficialCommonFriendlink) Short_() string {
	return "official_common_friendlink"
}

func (a *OfficialCommonFriendlink) Struct_() string {
	return "OfficialCommonFriendlink"
}

func (a *OfficialCommonFriendlink) Name_() string {
	b := a
	if b == nil {
		b = &OfficialCommonFriendlink{}
	}
	if b.base.Namer() != nil {
		return WithPrefix(b.base.Namer()(b))
	}
	return WithPrefix(factory.TableNamerGet(b.Short_())(b))
}

func (a *OfficialCommonFriendlink) CPAFrom(source factory.Model) factory.Model {
	a.SetContext(source.Context())
	a.SetConnID(source.ConnID())
	a.SetNamer(source.Namer())
	return a
}

func (a *OfficialCommonFriendlink) Get(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	base := a.base
	if !a.base.Eventable() {
		err = a.Param(mw, args...).SetRecv(a).One()
		a.base = base
		return
	}
	queryParam := a.Param(mw, args...).SetRecv(a)
	if err = DBI.FireReading(a, queryParam); err != nil {
		return
	}
	err = queryParam.One()
	a.base = base
	if err == nil {
		err = DBI.FireReaded(a, queryParam)
	}
	return
}

func (a *OfficialCommonFriendlink) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*OfficialCommonFriendlink:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialCommonFriendlink(*v))
		case []*OfficialCommonFriendlink:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialCommonFriendlink(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *OfficialCommonFriendlink) GroupBy(keyField string, inputRows ...[]*OfficialCommonFriendlink) map[string][]*OfficialCommonFriendlink {
	var rows Slice_OfficialCommonFriendlink
	if len(inputRows) > 0 {
		rows = Slice_OfficialCommonFriendlink(inputRows[0])
	} else {
		rows = Slice_OfficialCommonFriendlink(a.Objects())
	}
	return rows.GroupBy(keyField)
}

func (a *OfficialCommonFriendlink) KeyBy(keyField string, inputRows ...[]*OfficialCommonFriendlink) map[string]*OfficialCommonFriendlink {
	var rows Slice_OfficialCommonFriendlink
	if len(inputRows) > 0 {
		rows = Slice_OfficialCommonFriendlink(inputRows[0])
	} else {
		rows = Slice_OfficialCommonFriendlink(a.Objects())
	}
	return rows.KeyBy(keyField)
}

func (a *OfficialCommonFriendlink) AsKV(keyField string, valueField string, inputRows ...[]*OfficialCommonFriendlink) param.Store {
	var rows Slice_OfficialCommonFriendlink
	if len(inputRows) > 0 {
		rows = Slice_OfficialCommonFriendlink(inputRows[0])
	} else {
		rows = Slice_OfficialCommonFriendlink(a.Objects())
	}
	return rows.AsKV(keyField, valueField)
}

func (a *OfficialCommonFriendlink) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*OfficialCommonFriendlink:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialCommonFriendlink(*v))
		case []*OfficialCommonFriendlink:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialCommonFriendlink(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *OfficialCommonFriendlink) Insert() (pk interface{}, err error) {
	a.Created = uint(time.Now().Unix())
	a.Id = 0
	if len(a.VerifyResult) == 0 {
		a.VerifyResult = "none"
	}
	if len(a.Process) == 0 {
		a.Process = "idle"
	}
	if a.base.Eventable() {
		err = DBI.Fire("creating", a, nil)
		if err != nil {
			return
		}
	}
	pk, err = a.Param(nil).SetSend(a).Insert()
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint(v)
		}
	}
	if err == nil && a.base.Eventable() {
		err = DBI.Fire("created", a, nil)
	}
	return
}

func (a *OfficialCommonFriendlink) Update(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.VerifyResult) == 0 {
		a.VerifyResult = "none"
	}
	if len(a.Process) == 0 {
		a.Process = "idle"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Update()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(a).Update(); err != nil {
		return
	}
	return DBI.Fire("updated", a, mw, args...)
}

func (a *OfficialCommonFriendlink) Updatex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.VerifyResult) == 0 {
		a.VerifyResult = "none"
	}
	if len(a.Process) == 0 {
		a.Process = "idle"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Updatex()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).SetSend(a).Updatex(); err != nil {
		return
	}
	err = DBI.Fire("updated", a, mw, args...)
	return
}

func (a *OfficialCommonFriendlink) UpdateByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.VerifyResult) == 0 {
		a.VerifyResult = "none"
	}
	if len(a.Process) == 0 {
		a.Process = "idle"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdateByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).UpdateByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *OfficialCommonFriendlink) UpdatexByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (affected int64, err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.VerifyResult) == 0 {
		a.VerifyResult = "none"
	}
	if len(a.Process) == 0 {
		a.Process = "idle"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdatexByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).UpdatexByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *OfficialCommonFriendlink) UpdateField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (err error) {
	return a.UpdateFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *OfficialCommonFriendlink) UpdatexField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (affected int64, err error) {
	return a.UpdatexFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *OfficialCommonFriendlink) UpdateFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (err error) {

	if val, ok := kvset["verify_result"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["verify_result"] = "none"
		}
	}
	if val, ok := kvset["process"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["process"] = "idle"
		}
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(kvset).Update()
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(kvset).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, editColumns, mw, args...)
}

func (a *OfficialCommonFriendlink) UpdatexFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (affected int64, err error) {

	if val, ok := kvset["verify_result"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["verify_result"] = "none"
		}
	}
	if val, ok := kvset["process"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["process"] = "idle"
		}
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(kvset).Updatex()
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).SetSend(kvset).Updatex(); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", &m, editColumns, mw, args...)
	return
}

func (a *OfficialCommonFriendlink) UpdateValues(mw func(db.Result) db.Result, keysValues *db.KeysValues, args ...interface{}) (err error) {
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(keysValues).Update()
	}
	m := *a
	m.FromRow(keysValues.Map())
	if err = DBI.FireUpdate("updating", &m, keysValues.Keys(), mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(keysValues).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, keysValues.Keys(), mw, args...)
}

func (a *OfficialCommonFriendlink) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = a.Param(mw, args...).SetSend(a).Upsert(func() error {
		a.Updated = uint(time.Now().Unix())
		if len(a.VerifyResult) == 0 {
			a.VerifyResult = "none"
		}
		if len(a.Process) == 0 {
			a.Process = "idle"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("updating", a, mw, args...)
	}, func() error {
		a.Created = uint(time.Now().Unix())
		a.Id = 0
		if len(a.VerifyResult) == 0 {
			a.VerifyResult = "none"
		}
		if len(a.Process) == 0 {
			a.Process = "idle"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("creating", a, nil)
	})
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint(v)
		}
	}
	if err == nil && a.base.Eventable() {
		if pk == nil {
			err = DBI.Fire("updated", a, mw, args...)
		} else {
			err = DBI.Fire("created", a, nil)
		}
	}
	return
}

func (a *OfficialCommonFriendlink) Delete(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Delete()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).Delete(); err != nil {
		return
	}
	return DBI.Fire("deleted", a, mw, args...)
}

func (a *OfficialCommonFriendlink) Deletex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Deletex()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).Deletex(); err != nil {
		return
	}
	err = DBI.Fire("deleted", a, mw, args...)
	return
}

func (a *OfficialCommonFriendlink) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return a.Param(mw, args...).Count()
}

func (a *OfficialCommonFriendlink) Exists(mw func(db.Result) db.Result, args ...interface{}) (bool, error) {
	return a.Param(mw, args...).Exists()
}

func (a *OfficialCommonFriendlink) Reset() *OfficialCommonFriendlink {
	a.Id = 0
	a.CategoryId = 0
	a.CustomerId = 0
	a.Logo = ``
	a.LogoOriginal = ``
	a.Name = ``
	a.Description = ``
	a.Url = ``
	a.Host = ``
	a.VerifyTime = 0
	a.VerifyFailCount = 0
	a.VerifyResult = ``
	a.Process = ``
	a.ProcessRemark = ``
	a.Created = 0
	a.Updated = 0
	a.ReturnTime = 0
	a.ReturnCount = 0
	return a
}

func (a *OfficialCommonFriendlink) AsMap(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		r["Id"] = a.Id
		r["CategoryId"] = a.CategoryId
		r["CustomerId"] = a.CustomerId
		r["Logo"] = a.Logo
		r["LogoOriginal"] = a.LogoOriginal
		r["Name"] = a.Name
		r["Description"] = a.Description
		r["Url"] = a.Url
		r["Host"] = a.Host
		r["VerifyTime"] = a.VerifyTime
		r["VerifyFailCount"] = a.VerifyFailCount
		r["VerifyResult"] = a.VerifyResult
		r["Process"] = a.Process
		r["ProcessRemark"] = a.ProcessRemark
		r["Created"] = a.Created
		r["Updated"] = a.Updated
		r["ReturnTime"] = a.ReturnTime
		r["ReturnCount"] = a.ReturnCount
		return r
	}
	for _, field := range onlyFields {
		switch field {
		case "Id":
			r["Id"] = a.Id
		case "CategoryId":
			r["CategoryId"] = a.CategoryId
		case "CustomerId":
			r["CustomerId"] = a.CustomerId
		case "Logo":
			r["Logo"] = a.Logo
		case "LogoOriginal":
			r["LogoOriginal"] = a.LogoOriginal
		case "Name":
			r["Name"] = a.Name
		case "Description":
			r["Description"] = a.Description
		case "Url":
			r["Url"] = a.Url
		case "Host":
			r["Host"] = a.Host
		case "VerifyTime":
			r["VerifyTime"] = a.VerifyTime
		case "VerifyFailCount":
			r["VerifyFailCount"] = a.VerifyFailCount
		case "VerifyResult":
			r["VerifyResult"] = a.VerifyResult
		case "Process":
			r["Process"] = a.Process
		case "ProcessRemark":
			r["ProcessRemark"] = a.ProcessRemark
		case "Created":
			r["Created"] = a.Created
		case "Updated":
			r["Updated"] = a.Updated
		case "ReturnTime":
			r["ReturnTime"] = a.ReturnTime
		case "ReturnCount":
			r["ReturnCount"] = a.ReturnCount
		}
	}
	return r
}

func (a *OfficialCommonFriendlink) FromRow(row map[string]interface{}) {
	for key, value := range row {
		switch key {
		case "id":
			a.Id = param.AsUint(value)
		case "category_id":
			a.CategoryId = param.AsUint(value)
		case "customer_id":
			a.CustomerId = param.AsUint64(value)
		case "logo":
			a.Logo = param.AsString(value)
		case "logo_original":
			a.LogoOriginal = param.AsString(value)
		case "name":
			a.Name = param.AsString(value)
		case "description":
			a.Description = param.AsString(value)
		case "url":
			a.Url = param.AsString(value)
		case "host":
			a.Host = param.AsString(value)
		case "verify_time":
			a.VerifyTime = param.AsUint(value)
		case "verify_fail_count":
			a.VerifyFailCount = param.AsUint(value)
		case "verify_result":
			a.VerifyResult = param.AsString(value)
		case "process":
			a.Process = param.AsString(value)
		case "process_remark":
			a.ProcessRemark = param.AsString(value)
		case "created":
			a.Created = param.AsUint(value)
		case "updated":
			a.Updated = param.AsUint(value)
		case "return_time":
			a.ReturnTime = param.AsUint(value)
		case "return_count":
			a.ReturnCount = param.AsUint(value)
		}
	}
}

func (a *OfficialCommonFriendlink) Set(key interface{}, value ...interface{}) {
	switch k := key.(type) {
	case map[string]interface{}:
		for kk, vv := range k {
			a.Set(kk, vv)
		}
	default:
		var (
			kk string
			vv interface{}
		)
		if k, y := key.(string); y {
			kk = k
		} else {
			kk = fmt.Sprint(key)
		}
		if len(value) > 0 {
			vv = value[0]
		}
		switch kk {
		case "Id":
			a.Id = param.AsUint(vv)
		case "CategoryId":
			a.CategoryId = param.AsUint(vv)
		case "CustomerId":
			a.CustomerId = param.AsUint64(vv)
		case "Logo":
			a.Logo = param.AsString(vv)
		case "LogoOriginal":
			a.LogoOriginal = param.AsString(vv)
		case "Name":
			a.Name = param.AsString(vv)
		case "Description":
			a.Description = param.AsString(vv)
		case "Url":
			a.Url = param.AsString(vv)
		case "Host":
			a.Host = param.AsString(vv)
		case "VerifyTime":
			a.VerifyTime = param.AsUint(vv)
		case "VerifyFailCount":
			a.VerifyFailCount = param.AsUint(vv)
		case "VerifyResult":
			a.VerifyResult = param.AsString(vv)
		case "Process":
			a.Process = param.AsString(vv)
		case "ProcessRemark":
			a.ProcessRemark = param.AsString(vv)
		case "Created":
			a.Created = param.AsUint(vv)
		case "Updated":
			a.Updated = param.AsUint(vv)
		case "ReturnTime":
			a.ReturnTime = param.AsUint(vv)
		case "ReturnCount":
			a.ReturnCount = param.AsUint(vv)
		}
	}
}

func (a *OfficialCommonFriendlink) AsRow(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		r["id"] = a.Id
		r["category_id"] = a.CategoryId
		r["customer_id"] = a.CustomerId
		r["logo"] = a.Logo
		r["logo_original"] = a.LogoOriginal
		r["name"] = a.Name
		r["description"] = a.Description
		r["url"] = a.Url
		r["host"] = a.Host
		r["verify_time"] = a.VerifyTime
		r["verify_fail_count"] = a.VerifyFailCount
		r["verify_result"] = a.VerifyResult
		r["process"] = a.Process
		r["process_remark"] = a.ProcessRemark
		r["created"] = a.Created
		r["updated"] = a.Updated
		r["return_time"] = a.ReturnTime
		r["return_count"] = a.ReturnCount
		return r
	}
	for _, field := range onlyFields {
		switch field {
		case "id":
			r["id"] = a.Id
		case "category_id":
			r["category_id"] = a.CategoryId
		case "customer_id":
			r["customer_id"] = a.CustomerId
		case "logo":
			r["logo"] = a.Logo
		case "logo_original":
			r["logo_original"] = a.LogoOriginal
		case "name":
			r["name"] = a.Name
		case "description":
			r["description"] = a.Description
		case "url":
			r["url"] = a.Url
		case "host":
			r["host"] = a.Host
		case "verify_time":
			r["verify_time"] = a.VerifyTime
		case "verify_fail_count":
			r["verify_fail_count"] = a.VerifyFailCount
		case "verify_result":
			r["verify_result"] = a.VerifyResult
		case "process":
			r["process"] = a.Process
		case "process_remark":
			r["process_remark"] = a.ProcessRemark
		case "created":
			r["created"] = a.Created
		case "updated":
			r["updated"] = a.Updated
		case "return_time":
			r["return_time"] = a.ReturnTime
		case "return_count":
			r["return_count"] = a.ReturnCount
		}
	}
	return r
}

func (a *OfficialCommonFriendlink) ListPage(cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, nil, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *OfficialCommonFriendlink) ListPageAs(recv interface{}, cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, recv, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *OfficialCommonFriendlink) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = a.AsRow()
	}
	return DBI.Fields.BatchValidate(a.Short_(), kvset)
}

func (a *OfficialCommonFriendlink) Validate(field string, value interface{}) error {
	return DBI.Fields.Validate(a.Short_(), field, value)
}
