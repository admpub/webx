// @generated Do not edit this file, which is automatically generated by the generator.

package dbschema

import (
	"fmt"

	"github.com/webx-top/com"
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/db/lib/factory/pagination"
	"github.com/webx-top/echo"
	"github.com/webx-top/echo/param"
)

type Slice_OfficialAdSettings []*OfficialAdSettings

func (s Slice_OfficialAdSettings) Range(fn func(m factory.Model) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_OfficialAdSettings) RangeRaw(fn func(m *OfficialAdSettings) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_OfficialAdSettings) GroupBy(keyField string) map[string][]*OfficialAdSettings {
	r := map[string][]*OfficialAdSettings{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*OfficialAdSettings{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (s Slice_OfficialAdSettings) KeyBy(keyField string) map[string]*OfficialAdSettings {
	r := map[string]*OfficialAdSettings{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (s Slice_OfficialAdSettings) AsKV(keyField string, valueField string) param.Store {
	r := param.Store{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (s Slice_OfficialAdSettings) Transform(transfers map[string]param.Transfer) []param.Store {
	r := make([]param.Store, len(s))
	for idx, row := range s {
		r[idx] = row.AsMap().Transform(transfers)
	}
	return r
}

func (s Slice_OfficialAdSettings) FromList(data interface{}) Slice_OfficialAdSettings {
	values, ok := data.([]*OfficialAdSettings)
	if !ok {
		for _, value := range data.([]interface{}) {
			row := &OfficialAdSettings{}
			row.FromRow(value.(map[string]interface{}))
			s = append(s, row)
		}
		return s
	}
	s = append(s, values...)

	return s
}

func NewOfficialAdSettings(ctx echo.Context) *OfficialAdSettings {
	m := &OfficialAdSettings{}
	m.SetContext(ctx)
	return m
}

// OfficialAdSettings 广告设置
type OfficialAdSettings struct {
	base    factory.Base
	objects []*OfficialAdSettings

	Id       uint64 `db:"id,omitempty,pk" bson:"id,omitempty" comment:"ID" json:"id" xml:"id"`
	AdvertId uint64 `db:"advert_id" bson:"advert_id" comment:"广告ID" json:"advert_id" xml:"advert_id"`
	Type     string `db:"type" bson:"type" comment:"设置类型(area-地区;age-年龄;time-时段;client-客户端类型;gendar-性别)" json:"type" xml:"type"`
	Value    string `db:"value" bson:"value" comment:"值" json:"value" xml:"value"`
	VStart   uint   `db:"v_start" bson:"v_start" comment:"起始值" json:"v_start" xml:"v_start"`
	VEnd     uint   `db:"v_end" bson:"v_end" comment:"结束值" json:"v_end" xml:"v_end"`
	TStart   uint   `db:"t_start" bson:"t_start" comment:"起始时间" json:"t_start" xml:"t_start"`
	TEnd     uint   `db:"t_end" bson:"t_end" comment:"结束时间" json:"t_end" xml:"t_end"`
	Disabled string `db:"disabled" bson:"disabled" comment:"是否(Y/N)禁用" json:"disabled" xml:"disabled"`
}

// - base function

func (a *OfficialAdSettings) Trans() factory.Transactioner {
	return a.base.Trans()
}

func (a *OfficialAdSettings) Use(trans factory.Transactioner) factory.Model {
	a.base.Use(trans)
	return a
}

func (a *OfficialAdSettings) SetContext(ctx echo.Context) factory.Model {
	a.base.SetContext(ctx)
	return a
}

func (a *OfficialAdSettings) EventON(on ...bool) factory.Model {
	a.base.EventON(on...)
	return a
}

func (a *OfficialAdSettings) EventOFF(off ...bool) factory.Model {
	a.base.EventOFF(off...)
	return a
}

func (a *OfficialAdSettings) Context() echo.Context {
	return a.base.Context()
}

func (a *OfficialAdSettings) SetConnID(connID int) factory.Model {
	a.base.SetConnID(connID)
	return a
}

func (a *OfficialAdSettings) ConnID() int {
	return a.base.ConnID()
}

func (a *OfficialAdSettings) SetNamer(namer func(factory.Model) string) factory.Model {
	a.base.SetNamer(namer)
	return a
}

func (a *OfficialAdSettings) Namer() func(factory.Model) string {
	return a.base.Namer()
}

func (a *OfficialAdSettings) SetParam(param *factory.Param) factory.Model {
	a.base.SetParam(param)
	return a
}

func (a *OfficialAdSettings) Param(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	if a.base.Param() == nil {
		return a.NewParam().SetMiddleware(mw).SetArgs(args...)
	}
	return a.base.Param().SetMiddleware(mw).SetArgs(args...)
}

func (a *OfficialAdSettings) New(structName string, connID ...int) factory.Model {
	return a.base.New(structName, connID...)
}

func (a *OfficialAdSettings) Base_() factory.Baser {
	return &a.base
}

// - current function

func (a *OfficialAdSettings) Objects() []*OfficialAdSettings {
	if a.objects == nil {
		return nil
	}
	return a.objects[:]
}

func (a *OfficialAdSettings) XObjects() Slice_OfficialAdSettings {
	return Slice_OfficialAdSettings(a.Objects())
}

func (a *OfficialAdSettings) NewObjects() factory.Ranger {
	return &Slice_OfficialAdSettings{}
}

func (a *OfficialAdSettings) InitObjects() *[]*OfficialAdSettings {
	a.objects = []*OfficialAdSettings{}
	return &a.objects
}

func (a *OfficialAdSettings) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(a.base.ConnID()).SetTrans(a.base.Trans()).SetCollection(a.Name_()).SetModel(a)
}

func (a *OfficialAdSettings) Short_() string {
	return "official_ad_settings"
}

func (a *OfficialAdSettings) Struct_() string {
	return "OfficialAdSettings"
}

func (a *OfficialAdSettings) Name_() string {
	b := a
	if b == nil {
		b = &OfficialAdSettings{}
	}
	if b.base.Namer() != nil {
		return WithPrefix(b.base.Namer()(b))
	}
	return WithPrefix(factory.TableNamerGet(b.Short_())(b))
}

func (a *OfficialAdSettings) CPAFrom(source factory.Model) factory.Model {
	a.SetContext(source.Context())
	a.SetConnID(source.ConnID())
	a.SetNamer(source.Namer())
	return a
}

func (a *OfficialAdSettings) Get(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	base := a.base
	if !a.base.Eventable() {
		err = a.Param(mw, args...).SetRecv(a).One()
		a.base = base
		return
	}
	queryParam := a.Param(mw, args...).SetRecv(a)
	if err = DBI.FireReading(a, queryParam); err != nil {
		return
	}
	err = queryParam.One()
	a.base = base
	if err == nil {
		err = DBI.FireReaded(a, queryParam)
	}
	return
}

func (a *OfficialAdSettings) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*OfficialAdSettings:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialAdSettings(*v))
		case []*OfficialAdSettings:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialAdSettings(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *OfficialAdSettings) GroupBy(keyField string, inputRows ...[]*OfficialAdSettings) map[string][]*OfficialAdSettings {
	var rows Slice_OfficialAdSettings
	if len(inputRows) > 0 {
		rows = Slice_OfficialAdSettings(inputRows[0])
	} else {
		rows = Slice_OfficialAdSettings(a.Objects())
	}
	return rows.GroupBy(keyField)
}

func (a *OfficialAdSettings) KeyBy(keyField string, inputRows ...[]*OfficialAdSettings) map[string]*OfficialAdSettings {
	var rows Slice_OfficialAdSettings
	if len(inputRows) > 0 {
		rows = Slice_OfficialAdSettings(inputRows[0])
	} else {
		rows = Slice_OfficialAdSettings(a.Objects())
	}
	return rows.KeyBy(keyField)
}

func (a *OfficialAdSettings) AsKV(keyField string, valueField string, inputRows ...[]*OfficialAdSettings) param.Store {
	var rows Slice_OfficialAdSettings
	if len(inputRows) > 0 {
		rows = Slice_OfficialAdSettings(inputRows[0])
	} else {
		rows = Slice_OfficialAdSettings(a.Objects())
	}
	return rows.AsKV(keyField, valueField)
}

func (a *OfficialAdSettings) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*OfficialAdSettings:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialAdSettings(*v))
		case []*OfficialAdSettings:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialAdSettings(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *OfficialAdSettings) Insert() (pk interface{}, err error) {
	a.Id = 0
	if len(a.Type) == 0 {
		a.Type = "area"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if a.base.Eventable() {
		err = DBI.Fire("creating", a, nil)
		if err != nil {
			return
		}
	}
	pk, err = a.Param(nil).SetSend(a).Insert()
	if err == nil && pk != nil {
		if v, y := pk.(uint64); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint64(v)
		}
	}
	if err == nil && a.base.Eventable() {
		err = DBI.Fire("created", a, nil)
	}
	return
}

func (a *OfficialAdSettings) Update(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if len(a.Type) == 0 {
		a.Type = "area"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Update()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(a).Update(); err != nil {
		return
	}
	return DBI.Fire("updated", a, mw, args...)
}

func (a *OfficialAdSettings) Updatex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {

	if len(a.Type) == 0 {
		a.Type = "area"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Updatex()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).SetSend(a).Updatex(); err != nil {
		return
	}
	err = DBI.Fire("updated", a, mw, args...)
	return
}

func (a *OfficialAdSettings) UpdateByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (err error) {

	if len(a.Type) == 0 {
		a.Type = "area"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdateByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).UpdateByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *OfficialAdSettings) UpdatexByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (affected int64, err error) {

	if len(a.Type) == 0 {
		a.Type = "area"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdatexByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).UpdatexByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *OfficialAdSettings) UpdateField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (err error) {
	return a.UpdateFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *OfficialAdSettings) UpdatexField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (affected int64, err error) {
	return a.UpdatexFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *OfficialAdSettings) UpdateFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (err error) {

	if val, ok := kvset["type"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["type"] = "area"
		}
	}
	if val, ok := kvset["disabled"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["disabled"] = "N"
		}
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(kvset).Update()
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(kvset).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, editColumns, mw, args...)
}

func (a *OfficialAdSettings) UpdatexFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (affected int64, err error) {

	if val, ok := kvset["type"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["type"] = "area"
		}
	}
	if val, ok := kvset["disabled"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["disabled"] = "N"
		}
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(kvset).Updatex()
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).SetSend(kvset).Updatex(); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", &m, editColumns, mw, args...)
	return
}

func (a *OfficialAdSettings) UpdateValues(mw func(db.Result) db.Result, keysValues *db.KeysValues, args ...interface{}) (err error) {
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(keysValues).Update()
	}
	m := *a
	m.FromRow(keysValues.Map())
	if err = DBI.FireUpdate("updating", &m, keysValues.Keys(), mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(keysValues).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, keysValues.Keys(), mw, args...)
}

func (a *OfficialAdSettings) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = a.Param(mw, args...).SetSend(a).Upsert(func() error {
		if len(a.Type) == 0 {
			a.Type = "area"
		}
		if len(a.Disabled) == 0 {
			a.Disabled = "N"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("updating", a, mw, args...)
	}, func() error {
		a.Id = 0
		if len(a.Type) == 0 {
			a.Type = "area"
		}
		if len(a.Disabled) == 0 {
			a.Disabled = "N"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("creating", a, nil)
	})
	if err == nil && pk != nil {
		if v, y := pk.(uint64); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint64(v)
		}
	}
	if err == nil && a.base.Eventable() {
		if pk == nil {
			err = DBI.Fire("updated", a, mw, args...)
		} else {
			err = DBI.Fire("created", a, nil)
		}
	}
	return
}

func (a *OfficialAdSettings) Delete(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Delete()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).Delete(); err != nil {
		return
	}
	return DBI.Fire("deleted", a, mw, args...)
}

func (a *OfficialAdSettings) Deletex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Deletex()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).Deletex(); err != nil {
		return
	}
	err = DBI.Fire("deleted", a, mw, args...)
	return
}

func (a *OfficialAdSettings) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return a.Param(mw, args...).Count()
}

func (a *OfficialAdSettings) Exists(mw func(db.Result) db.Result, args ...interface{}) (bool, error) {
	return a.Param(mw, args...).Exists()
}

func (a *OfficialAdSettings) Reset() *OfficialAdSettings {
	a.Id = 0
	a.AdvertId = 0
	a.Type = ``
	a.Value = ``
	a.VStart = 0
	a.VEnd = 0
	a.TStart = 0
	a.TEnd = 0
	a.Disabled = ``
	return a
}

func (a *OfficialAdSettings) AsMap(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		r["Id"] = a.Id
		r["AdvertId"] = a.AdvertId
		r["Type"] = a.Type
		r["Value"] = a.Value
		r["VStart"] = a.VStart
		r["VEnd"] = a.VEnd
		r["TStart"] = a.TStart
		r["TEnd"] = a.TEnd
		r["Disabled"] = a.Disabled
		return r
	}
	for _, field := range onlyFields {
		switch field {
		case "Id":
			r["Id"] = a.Id
		case "AdvertId":
			r["AdvertId"] = a.AdvertId
		case "Type":
			r["Type"] = a.Type
		case "Value":
			r["Value"] = a.Value
		case "VStart":
			r["VStart"] = a.VStart
		case "VEnd":
			r["VEnd"] = a.VEnd
		case "TStart":
			r["TStart"] = a.TStart
		case "TEnd":
			r["TEnd"] = a.TEnd
		case "Disabled":
			r["Disabled"] = a.Disabled
		}
	}
	return r
}

func (a *OfficialAdSettings) FromRow(row map[string]interface{}) {
	for key, value := range row {
		switch key {
		case "id":
			a.Id = param.AsUint64(value)
		case "advert_id":
			a.AdvertId = param.AsUint64(value)
		case "type":
			a.Type = param.AsString(value)
		case "value":
			a.Value = param.AsString(value)
		case "v_start":
			a.VStart = param.AsUint(value)
		case "v_end":
			a.VEnd = param.AsUint(value)
		case "t_start":
			a.TStart = param.AsUint(value)
		case "t_end":
			a.TEnd = param.AsUint(value)
		case "disabled":
			a.Disabled = param.AsString(value)
		}
	}
}

func (a *OfficialAdSettings) Set(key interface{}, value ...interface{}) {
	switch k := key.(type) {
	case map[string]interface{}:
		for kk, vv := range k {
			a.Set(kk, vv)
		}
	default:
		var (
			kk string
			vv interface{}
		)
		if k, y := key.(string); y {
			kk = k
		} else {
			kk = fmt.Sprint(key)
		}
		if len(value) > 0 {
			vv = value[0]
		}
		switch kk {
		case "Id":
			a.Id = param.AsUint64(vv)
		case "AdvertId":
			a.AdvertId = param.AsUint64(vv)
		case "Type":
			a.Type = param.AsString(vv)
		case "Value":
			a.Value = param.AsString(vv)
		case "VStart":
			a.VStart = param.AsUint(vv)
		case "VEnd":
			a.VEnd = param.AsUint(vv)
		case "TStart":
			a.TStart = param.AsUint(vv)
		case "TEnd":
			a.TEnd = param.AsUint(vv)
		case "Disabled":
			a.Disabled = param.AsString(vv)
		}
	}
}

func (a *OfficialAdSettings) AsRow(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		r["id"] = a.Id
		r["advert_id"] = a.AdvertId
		r["type"] = a.Type
		r["value"] = a.Value
		r["v_start"] = a.VStart
		r["v_end"] = a.VEnd
		r["t_start"] = a.TStart
		r["t_end"] = a.TEnd
		r["disabled"] = a.Disabled
		return r
	}
	for _, field := range onlyFields {
		switch field {
		case "id":
			r["id"] = a.Id
		case "advert_id":
			r["advert_id"] = a.AdvertId
		case "type":
			r["type"] = a.Type
		case "value":
			r["value"] = a.Value
		case "v_start":
			r["v_start"] = a.VStart
		case "v_end":
			r["v_end"] = a.VEnd
		case "t_start":
			r["t_start"] = a.TStart
		case "t_end":
			r["t_end"] = a.TEnd
		case "disabled":
			r["disabled"] = a.Disabled
		}
	}
	return r
}

func (a *OfficialAdSettings) ListPage(cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, nil, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *OfficialAdSettings) ListPageAs(recv interface{}, cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, recv, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *OfficialAdSettings) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = a.AsRow()
	}
	return DBI.Fields.BatchValidate(a.Short_(), kvset)
}

func (a *OfficialAdSettings) Validate(field string, value interface{}) error {
	return DBI.Fields.Validate(a.Short_(), field, value)
}
