// @generated Do not edit this file, which is automatically generated by the generator.

package dbschema

import (
	"fmt"

	"time"

	"github.com/webx-top/com"
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/db/lib/factory/pagination"
	"github.com/webx-top/echo"
	"github.com/webx-top/echo/param"
)

type Slice_OfficialCustomerAgentProfile []*OfficialCustomerAgentProfile

func (s Slice_OfficialCustomerAgentProfile) Range(fn func(m factory.Model) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_OfficialCustomerAgentProfile) RangeRaw(fn func(m *OfficialCustomerAgentProfile) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_OfficialCustomerAgentProfile) GroupBy(keyField string) map[string][]*OfficialCustomerAgentProfile {
	r := map[string][]*OfficialCustomerAgentProfile{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*OfficialCustomerAgentProfile{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (s Slice_OfficialCustomerAgentProfile) KeyBy(keyField string) map[string]*OfficialCustomerAgentProfile {
	r := map[string]*OfficialCustomerAgentProfile{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (s Slice_OfficialCustomerAgentProfile) AsKV(keyField string, valueField string) param.Store {
	r := param.Store{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (s Slice_OfficialCustomerAgentProfile) Transform(transfers map[string]param.Transfer) []param.Store {
	r := make([]param.Store, len(s))
	for idx, row := range s {
		r[idx] = row.AsMap().Transform(transfers)
	}
	return r
}

func (s Slice_OfficialCustomerAgentProfile) FromList(data interface{}) Slice_OfficialCustomerAgentProfile {
	values, ok := data.([]*OfficialCustomerAgentProfile)
	if !ok {
		for _, value := range data.([]interface{}) {
			row := &OfficialCustomerAgentProfile{}
			row.FromRow(value.(map[string]interface{}))
			s = append(s, row)
		}
		return s
	}
	s = append(s, values...)

	return s
}

func NewOfficialCustomerAgentProfile(ctx echo.Context) *OfficialCustomerAgentProfile {
	m := &OfficialCustomerAgentProfile{}
	m.SetContext(ctx)
	return m
}

// OfficialCustomerAgentProfile
type OfficialCustomerAgentProfile struct {
	base    factory.Base
	objects []*OfficialCustomerAgentProfile

	CustomerId     uint64  `db:"customer_id,pk" bson:"customer_id" comment:"客户ID" json:"customer_id" xml:"customer_id"`
	EarningBalance float64 `db:"earning_balance" bson:"earning_balance" comment:"可提现收入金额" json:"earning_balance" xml:"earning_balance"`
	FreezeAmount   float64 `db:"freeze_amount" bson:"freeze_amount" comment:"冻结金额(提现中)" json:"freeze_amount" xml:"freeze_amount"`
	MarginAmount   uint64  `db:"margin_amount" bson:"margin_amount" comment:"保证金金额" json:"margin_amount" xml:"margin_amount"`
	Sold           uint64  `db:"sold" bson:"sold" comment:"销量" json:"sold" xml:"sold"`
	Members        uint64  `db:"members" bson:"members" comment:"成员统计" json:"members" xml:"members"`
	Status         string  `db:"status" bson:"status" comment:"状态(idle:空闲/草稿;pending:待付款;paid:已付款;unconfirm:未确认;success:申请成功;reject:拒绝;cheat:作弊封号;unsignedContract-未签合同;signedContract-已签合同)" json:"status" xml:"status"`
	ApplyLevel     uint    `db:"apply_level" bson:"apply_level" comment:"申请代理等级ID" json:"apply_level" xml:"apply_level"`
	Remark         string  `db:"remark" bson:"remark" comment:"备注" json:"remark" xml:"remark"`
	Created        uint    `db:"created" bson:"created" comment:"申请时间" json:"created" xml:"created"`
	Updated        uint    `db:"updated" bson:"updated" comment:"资料更新时间" json:"updated" xml:"updated"`
}

// - base function

func (a *OfficialCustomerAgentProfile) Trans() factory.Transactioner {
	return a.base.Trans()
}

func (a *OfficialCustomerAgentProfile) Use(trans factory.Transactioner) factory.Model {
	a.base.Use(trans)
	return a
}

func (a *OfficialCustomerAgentProfile) SetContext(ctx echo.Context) factory.Model {
	a.base.SetContext(ctx)
	return a
}

func (a *OfficialCustomerAgentProfile) EventON(on ...bool) factory.Model {
	a.base.EventON(on...)
	return a
}

func (a *OfficialCustomerAgentProfile) EventOFF(off ...bool) factory.Model {
	a.base.EventOFF(off...)
	return a
}

func (a *OfficialCustomerAgentProfile) Context() echo.Context {
	return a.base.Context()
}

func (a *OfficialCustomerAgentProfile) SetConnID(connID int) factory.Model {
	a.base.SetConnID(connID)
	return a
}

func (a *OfficialCustomerAgentProfile) ConnID() int {
	return a.base.ConnID()
}

func (a *OfficialCustomerAgentProfile) SetNamer(namer func(factory.Model) string) factory.Model {
	a.base.SetNamer(namer)
	return a
}

func (a *OfficialCustomerAgentProfile) Namer() func(factory.Model) string {
	return a.base.Namer()
}

func (a *OfficialCustomerAgentProfile) SetParam(param *factory.Param) factory.Model {
	a.base.SetParam(param)
	return a
}

func (a *OfficialCustomerAgentProfile) Param(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	if a.base.Param() == nil {
		return a.NewParam().SetMiddleware(mw).SetArgs(args...)
	}
	return a.base.Param().SetMiddleware(mw).SetArgs(args...)
}

func (a *OfficialCustomerAgentProfile) New(structName string, connID ...int) factory.Model {
	return a.base.New(structName, connID...)
}

func (a *OfficialCustomerAgentProfile) Base_() factory.Baser {
	return &a.base
}

// - current function

func (a *OfficialCustomerAgentProfile) Objects() []*OfficialCustomerAgentProfile {
	if a.objects == nil {
		return nil
	}
	return a.objects[:]
}

func (a *OfficialCustomerAgentProfile) XObjects() Slice_OfficialCustomerAgentProfile {
	return Slice_OfficialCustomerAgentProfile(a.Objects())
}

func (a *OfficialCustomerAgentProfile) NewObjects() factory.Ranger {
	return &Slice_OfficialCustomerAgentProfile{}
}

func (a *OfficialCustomerAgentProfile) InitObjects() *[]*OfficialCustomerAgentProfile {
	a.objects = []*OfficialCustomerAgentProfile{}
	return &a.objects
}

func (a *OfficialCustomerAgentProfile) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(a.base.ConnID()).SetTrans(a.base.Trans()).SetCollection(a.Name_()).SetModel(a)
}

func (a *OfficialCustomerAgentProfile) Short_() string {
	return "official_customer_agent_profile"
}

func (a *OfficialCustomerAgentProfile) Struct_() string {
	return "OfficialCustomerAgentProfile"
}

func (a *OfficialCustomerAgentProfile) Name_() string {
	b := a
	if b == nil {
		b = &OfficialCustomerAgentProfile{}
	}
	if b.base.Namer() != nil {
		return WithPrefix(b.base.Namer()(b))
	}
	return WithPrefix(factory.TableNamerGet(b.Short_())(b))
}

func (a *OfficialCustomerAgentProfile) CPAFrom(source factory.Model) factory.Model {
	a.SetContext(source.Context())
	a.SetConnID(source.ConnID())
	a.SetNamer(source.Namer())
	return a
}

func (a *OfficialCustomerAgentProfile) Get(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	base := a.base
	if !a.base.Eventable() {
		err = a.Param(mw, args...).SetRecv(a).One()
		a.base = base
		return
	}
	queryParam := a.Param(mw, args...).SetRecv(a)
	if err = DBI.FireReading(a, queryParam); err != nil {
		return
	}
	err = queryParam.One()
	a.base = base
	if err == nil {
		err = DBI.FireReaded(a, queryParam)
	}
	return
}

func (a *OfficialCustomerAgentProfile) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*OfficialCustomerAgentProfile:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialCustomerAgentProfile(*v))
		case []*OfficialCustomerAgentProfile:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialCustomerAgentProfile(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *OfficialCustomerAgentProfile) GroupBy(keyField string, inputRows ...[]*OfficialCustomerAgentProfile) map[string][]*OfficialCustomerAgentProfile {
	var rows Slice_OfficialCustomerAgentProfile
	if len(inputRows) > 0 {
		rows = Slice_OfficialCustomerAgentProfile(inputRows[0])
	} else {
		rows = Slice_OfficialCustomerAgentProfile(a.Objects())
	}
	return rows.GroupBy(keyField)
}

func (a *OfficialCustomerAgentProfile) KeyBy(keyField string, inputRows ...[]*OfficialCustomerAgentProfile) map[string]*OfficialCustomerAgentProfile {
	var rows Slice_OfficialCustomerAgentProfile
	if len(inputRows) > 0 {
		rows = Slice_OfficialCustomerAgentProfile(inputRows[0])
	} else {
		rows = Slice_OfficialCustomerAgentProfile(a.Objects())
	}
	return rows.KeyBy(keyField)
}

func (a *OfficialCustomerAgentProfile) AsKV(keyField string, valueField string, inputRows ...[]*OfficialCustomerAgentProfile) param.Store {
	var rows Slice_OfficialCustomerAgentProfile
	if len(inputRows) > 0 {
		rows = Slice_OfficialCustomerAgentProfile(inputRows[0])
	} else {
		rows = Slice_OfficialCustomerAgentProfile(a.Objects())
	}
	return rows.AsKV(keyField, valueField)
}

func (a *OfficialCustomerAgentProfile) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*OfficialCustomerAgentProfile:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialCustomerAgentProfile(*v))
		case []*OfficialCustomerAgentProfile:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialCustomerAgentProfile(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *OfficialCustomerAgentProfile) Insert() (pk interface{}, err error) {
	a.Created = uint(time.Now().Unix())
	if len(a.Status) == 0 {
		a.Status = "pending"
	}
	if a.base.Eventable() {
		err = DBI.Fire("creating", a, nil)
		if err != nil {
			return
		}
	}
	pk, err = a.Param(nil).SetSend(a).Insert()

	if err == nil && a.base.Eventable() {
		err = DBI.Fire("created", a, nil)
	}
	return
}

func (a *OfficialCustomerAgentProfile) Update(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.Status) == 0 {
		a.Status = "pending"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Update()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(a).Update(); err != nil {
		return
	}
	return DBI.Fire("updated", a, mw, args...)
}

func (a *OfficialCustomerAgentProfile) Updatex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.Status) == 0 {
		a.Status = "pending"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Updatex()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).SetSend(a).Updatex(); err != nil {
		return
	}
	err = DBI.Fire("updated", a, mw, args...)
	return
}

func (a *OfficialCustomerAgentProfile) UpdateByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.Status) == 0 {
		a.Status = "pending"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdateByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).UpdateByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *OfficialCustomerAgentProfile) UpdatexByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (affected int64, err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.Status) == 0 {
		a.Status = "pending"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdatexByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).UpdatexByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *OfficialCustomerAgentProfile) UpdateField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (err error) {
	return a.UpdateFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *OfficialCustomerAgentProfile) UpdatexField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (affected int64, err error) {
	return a.UpdatexFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *OfficialCustomerAgentProfile) UpdateFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (err error) {

	if val, ok := kvset["status"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["status"] = "pending"
		}
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(kvset).Update()
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(kvset).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, editColumns, mw, args...)
}

func (a *OfficialCustomerAgentProfile) UpdatexFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (affected int64, err error) {

	if val, ok := kvset["status"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["status"] = "pending"
		}
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(kvset).Updatex()
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).SetSend(kvset).Updatex(); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", &m, editColumns, mw, args...)
	return
}

func (a *OfficialCustomerAgentProfile) UpdateValues(mw func(db.Result) db.Result, keysValues *db.KeysValues, args ...interface{}) (err error) {
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(keysValues).Update()
	}
	m := *a
	m.FromRow(keysValues.Map())
	if err = DBI.FireUpdate("updating", &m, keysValues.Keys(), mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(keysValues).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, keysValues.Keys(), mw, args...)
}

func (a *OfficialCustomerAgentProfile) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = a.Param(mw, args...).SetSend(a).Upsert(func() error {
		a.Updated = uint(time.Now().Unix())
		if len(a.Status) == 0 {
			a.Status = "pending"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("updating", a, mw, args...)
	}, func() error {
		a.Created = uint(time.Now().Unix())
		if len(a.Status) == 0 {
			a.Status = "pending"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("creating", a, nil)
	})

	if err == nil && a.base.Eventable() {
		if pk == nil {
			err = DBI.Fire("updated", a, mw, args...)
		} else {
			err = DBI.Fire("created", a, nil)
		}
	}
	return
}

func (a *OfficialCustomerAgentProfile) Delete(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Delete()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).Delete(); err != nil {
		return
	}
	return DBI.Fire("deleted", a, mw, args...)
}

func (a *OfficialCustomerAgentProfile) Deletex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Deletex()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).Deletex(); err != nil {
		return
	}
	err = DBI.Fire("deleted", a, mw, args...)
	return
}

func (a *OfficialCustomerAgentProfile) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return a.Param(mw, args...).Count()
}

func (a *OfficialCustomerAgentProfile) Exists(mw func(db.Result) db.Result, args ...interface{}) (bool, error) {
	return a.Param(mw, args...).Exists()
}

func (a *OfficialCustomerAgentProfile) Reset() *OfficialCustomerAgentProfile {
	a.CustomerId = 0
	a.EarningBalance = 0.0
	a.FreezeAmount = 0.0
	a.MarginAmount = 0
	a.Sold = 0
	a.Members = 0
	a.Status = ``
	a.ApplyLevel = 0
	a.Remark = ``
	a.Created = 0
	a.Updated = 0
	return a
}

func (a *OfficialCustomerAgentProfile) AsMap(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		r["CustomerId"] = a.CustomerId
		r["EarningBalance"] = a.EarningBalance
		r["FreezeAmount"] = a.FreezeAmount
		r["MarginAmount"] = a.MarginAmount
		r["Sold"] = a.Sold
		r["Members"] = a.Members
		r["Status"] = a.Status
		r["ApplyLevel"] = a.ApplyLevel
		r["Remark"] = a.Remark
		r["Created"] = a.Created
		r["Updated"] = a.Updated
		return r
	}
	for _, field := range onlyFields {
		switch field {
		case "CustomerId":
			r["CustomerId"] = a.CustomerId
		case "EarningBalance":
			r["EarningBalance"] = a.EarningBalance
		case "FreezeAmount":
			r["FreezeAmount"] = a.FreezeAmount
		case "MarginAmount":
			r["MarginAmount"] = a.MarginAmount
		case "Sold":
			r["Sold"] = a.Sold
		case "Members":
			r["Members"] = a.Members
		case "Status":
			r["Status"] = a.Status
		case "ApplyLevel":
			r["ApplyLevel"] = a.ApplyLevel
		case "Remark":
			r["Remark"] = a.Remark
		case "Created":
			r["Created"] = a.Created
		case "Updated":
			r["Updated"] = a.Updated
		}
	}
	return r
}

func (a *OfficialCustomerAgentProfile) FromRow(row map[string]interface{}) {
	for key, value := range row {
		switch key {
		case "customer_id":
			a.CustomerId = param.AsUint64(value)
		case "earning_balance":
			a.EarningBalance = param.AsFloat64(value)
		case "freeze_amount":
			a.FreezeAmount = param.AsFloat64(value)
		case "margin_amount":
			a.MarginAmount = param.AsUint64(value)
		case "sold":
			a.Sold = param.AsUint64(value)
		case "members":
			a.Members = param.AsUint64(value)
		case "status":
			a.Status = param.AsString(value)
		case "apply_level":
			a.ApplyLevel = param.AsUint(value)
		case "remark":
			a.Remark = param.AsString(value)
		case "created":
			a.Created = param.AsUint(value)
		case "updated":
			a.Updated = param.AsUint(value)
		}
	}
}

func (a *OfficialCustomerAgentProfile) Set(key interface{}, value ...interface{}) {
	switch k := key.(type) {
	case map[string]interface{}:
		for kk, vv := range k {
			a.Set(kk, vv)
		}
	default:
		var (
			kk string
			vv interface{}
		)
		if k, y := key.(string); y {
			kk = k
		} else {
			kk = fmt.Sprint(key)
		}
		if len(value) > 0 {
			vv = value[0]
		}
		switch kk {
		case "CustomerId":
			a.CustomerId = param.AsUint64(vv)
		case "EarningBalance":
			a.EarningBalance = param.AsFloat64(vv)
		case "FreezeAmount":
			a.FreezeAmount = param.AsFloat64(vv)
		case "MarginAmount":
			a.MarginAmount = param.AsUint64(vv)
		case "Sold":
			a.Sold = param.AsUint64(vv)
		case "Members":
			a.Members = param.AsUint64(vv)
		case "Status":
			a.Status = param.AsString(vv)
		case "ApplyLevel":
			a.ApplyLevel = param.AsUint(vv)
		case "Remark":
			a.Remark = param.AsString(vv)
		case "Created":
			a.Created = param.AsUint(vv)
		case "Updated":
			a.Updated = param.AsUint(vv)
		}
	}
}

func (a *OfficialCustomerAgentProfile) AsRow(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		r["customer_id"] = a.CustomerId
		r["earning_balance"] = a.EarningBalance
		r["freeze_amount"] = a.FreezeAmount
		r["margin_amount"] = a.MarginAmount
		r["sold"] = a.Sold
		r["members"] = a.Members
		r["status"] = a.Status
		r["apply_level"] = a.ApplyLevel
		r["remark"] = a.Remark
		r["created"] = a.Created
		r["updated"] = a.Updated
		return r
	}
	for _, field := range onlyFields {
		switch field {
		case "customer_id":
			r["customer_id"] = a.CustomerId
		case "earning_balance":
			r["earning_balance"] = a.EarningBalance
		case "freeze_amount":
			r["freeze_amount"] = a.FreezeAmount
		case "margin_amount":
			r["margin_amount"] = a.MarginAmount
		case "sold":
			r["sold"] = a.Sold
		case "members":
			r["members"] = a.Members
		case "status":
			r["status"] = a.Status
		case "apply_level":
			r["apply_level"] = a.ApplyLevel
		case "remark":
			r["remark"] = a.Remark
		case "created":
			r["created"] = a.Created
		case "updated":
			r["updated"] = a.Updated
		}
	}
	return r
}

func (a *OfficialCustomerAgentProfile) ListPage(cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, nil, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *OfficialCustomerAgentProfile) ListPageAs(recv interface{}, cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, recv, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *OfficialCustomerAgentProfile) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = a.AsRow()
	}
	return DBI.Fields.BatchValidate(a.Short_(), kvset)
}

func (a *OfficialCustomerAgentProfile) Validate(field string, value interface{}) error {
	return DBI.Fields.Validate(a.Short_(), field, value)
}
