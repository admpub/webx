// @generated Do not edit this file, which is automatically generated by the generator.

package dbschema

import (
	"fmt"

	"time"

	"github.com/webx-top/com"
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/db/lib/factory/pagination"
	"github.com/webx-top/echo"
	"github.com/webx-top/echo/param"
)

type Slice_OfficialShortUrlVisit []*OfficialShortUrlVisit

func (s Slice_OfficialShortUrlVisit) Range(fn func(m factory.Model) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_OfficialShortUrlVisit) RangeRaw(fn func(m *OfficialShortUrlVisit) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_OfficialShortUrlVisit) GroupBy(keyField string) map[string][]*OfficialShortUrlVisit {
	r := map[string][]*OfficialShortUrlVisit{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*OfficialShortUrlVisit{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (s Slice_OfficialShortUrlVisit) KeyBy(keyField string) map[string]*OfficialShortUrlVisit {
	r := map[string]*OfficialShortUrlVisit{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (s Slice_OfficialShortUrlVisit) AsKV(keyField string, valueField string) param.Store {
	r := param.Store{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (s Slice_OfficialShortUrlVisit) Transform(transfers map[string]param.Transfer) []param.Store {
	r := make([]param.Store, len(s))
	for idx, row := range s {
		r[idx] = row.AsMap().Transform(transfers)
	}
	return r
}

func (s Slice_OfficialShortUrlVisit) FromList(data interface{}) Slice_OfficialShortUrlVisit {
	values, ok := data.([]*OfficialShortUrlVisit)
	if !ok {
		for _, value := range data.([]interface{}) {
			row := &OfficialShortUrlVisit{}
			row.FromRow(value.(map[string]interface{}))
			s = append(s, row)
		}
		return s
	}
	s = append(s, values...)

	return s
}

func NewOfficialShortUrlVisit(ctx echo.Context) *OfficialShortUrlVisit {
	m := &OfficialShortUrlVisit{}
	m.SetContext(ctx)
	return m
}

// OfficialShortUrlVisit 网址访问日志
type OfficialShortUrlVisit struct {
	base    factory.Base
	objects []*OfficialShortUrlVisit

	OwnerId        uint64 `db:"owner_id" bson:"owner_id" comment:"所有者ID" json:"owner_id" xml:"owner_id"`
	OwnerType      string `db:"owner_type" bson:"owner_type" comment:"所有者类型(customer-前台客户;user-后台用户)" json:"owner_type" xml:"owner_type"`
	UrlId          uint64 `db:"url_id" bson:"url_id" comment:"网址ID" json:"url_id" xml:"url_id"`
	DomainId       uint64 `db:"domain_id" bson:"domain_id" comment:"域名ID" json:"domain_id" xml:"domain_id"`
	Year           uint   `db:"year" bson:"year" comment:"年" json:"year" xml:"year"`
	Month          uint   `db:"month" bson:"month" comment:"月" json:"month" xml:"month"`
	Day            uint   `db:"day" bson:"day" comment:"日" json:"day" xml:"day"`
	Hour           uint   `db:"hour" bson:"hour" comment:"时" json:"hour" xml:"hour"`
	Ip             string `db:"ip" bson:"ip" comment:"IP" json:"ip" xml:"ip"`
	Referer        string `db:"referer" bson:"referer" comment:"来源网址" json:"referer" xml:"referer"`
	Language       string `db:"language" bson:"language" comment:"语言" json:"language" xml:"language"`
	Country        string `db:"country" bson:"country" comment:"国家" json:"country" xml:"country"`
	Region         string `db:"region" bson:"region" comment:"行政区" json:"region" xml:"region"`
	Province       string `db:"province" bson:"province" comment:"省份" json:"province" xml:"province"`
	City           string `db:"city" bson:"city" comment:"城市" json:"city" xml:"city"`
	Isp            string `db:"isp" bson:"isp" comment:"ISP网络" json:"isp" xml:"isp"`
	Os             string `db:"os" bson:"os" comment:"操作系统" json:"os" xml:"os"`
	OsVersion      string `db:"os_version" bson:"os_version" comment:"操作系统版本" json:"os_version" xml:"os_version"`
	Browser        string `db:"browser" bson:"browser" comment:"浏览器" json:"browser" xml:"browser"`
	BrowserVersion string `db:"browser_version" bson:"browser_version" comment:"浏览器版本" json:"browser_version" xml:"browser_version"`
	Created        int    `db:"created" bson:"created" comment:"创建时间" json:"created" xml:"created"`
}

// - base function

func (a *OfficialShortUrlVisit) Trans() factory.Transactioner {
	return a.base.Trans()
}

func (a *OfficialShortUrlVisit) Use(trans factory.Transactioner) factory.Model {
	a.base.Use(trans)
	return a
}

func (a *OfficialShortUrlVisit) SetContext(ctx echo.Context) factory.Model {
	a.base.SetContext(ctx)
	return a
}

func (a *OfficialShortUrlVisit) EventON(on ...bool) factory.Model {
	a.base.EventON(on...)
	return a
}

func (a *OfficialShortUrlVisit) EventOFF(off ...bool) factory.Model {
	a.base.EventOFF(off...)
	return a
}

func (a *OfficialShortUrlVisit) Context() echo.Context {
	return a.base.Context()
}

func (a *OfficialShortUrlVisit) SetConnID(connID int) factory.Model {
	a.base.SetConnID(connID)
	return a
}

func (a *OfficialShortUrlVisit) ConnID() int {
	return a.base.ConnID()
}

func (a *OfficialShortUrlVisit) SetNamer(namer func(factory.Model) string) factory.Model {
	a.base.SetNamer(namer)
	return a
}

func (a *OfficialShortUrlVisit) Namer() func(factory.Model) string {
	return a.base.Namer()
}

func (a *OfficialShortUrlVisit) SetParam(param *factory.Param) factory.Model {
	a.base.SetParam(param)
	return a
}

func (a *OfficialShortUrlVisit) Param(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	if a.base.Param() == nil {
		return a.NewParam().SetMiddleware(mw).SetArgs(args...)
	}
	return a.base.Param().SetMiddleware(mw).SetArgs(args...)
}

func (a *OfficialShortUrlVisit) New(structName string, connID ...int) factory.Model {
	return a.base.New(structName, connID...)
}

func (a *OfficialShortUrlVisit) Base_() factory.Baser {
	return &a.base
}

// - current function

func (a *OfficialShortUrlVisit) Objects() []*OfficialShortUrlVisit {
	if a.objects == nil {
		return nil
	}
	return a.objects[:]
}

func (a *OfficialShortUrlVisit) XObjects() Slice_OfficialShortUrlVisit {
	return Slice_OfficialShortUrlVisit(a.Objects())
}

func (a *OfficialShortUrlVisit) NewObjects() factory.Ranger {
	return &Slice_OfficialShortUrlVisit{}
}

func (a *OfficialShortUrlVisit) InitObjects() *[]*OfficialShortUrlVisit {
	a.objects = []*OfficialShortUrlVisit{}
	return &a.objects
}

func (a *OfficialShortUrlVisit) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(a.base.ConnID()).SetTrans(a.base.Trans()).SetCollection(a.Name_()).SetModel(a)
}

func (a *OfficialShortUrlVisit) Short_() string {
	return "official_short_url_visit"
}

func (a *OfficialShortUrlVisit) Struct_() string {
	return "OfficialShortUrlVisit"
}

func (a *OfficialShortUrlVisit) Name_() string {
	b := a
	if b == nil {
		b = &OfficialShortUrlVisit{}
	}
	if b.base.Namer() != nil {
		return WithPrefix(b.base.Namer()(b))
	}
	return WithPrefix(factory.TableNamerGet(b.Short_())(b))
}

func (a *OfficialShortUrlVisit) CPAFrom(source factory.Model) factory.Model {
	a.SetContext(source.Context())
	a.SetConnID(source.ConnID())
	a.SetNamer(source.Namer())
	return a
}

func (a *OfficialShortUrlVisit) Get(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	base := a.base
	if !a.base.Eventable() {
		err = a.Param(mw, args...).SetRecv(a).One()
		a.base = base
		return
	}
	queryParam := a.Param(mw, args...).SetRecv(a)
	if err = DBI.FireReading(a, queryParam); err != nil {
		return
	}
	err = queryParam.One()
	a.base = base
	if err == nil {
		err = DBI.FireReaded(a, queryParam)
	}
	return
}

func (a *OfficialShortUrlVisit) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*OfficialShortUrlVisit:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialShortUrlVisit(*v))
		case []*OfficialShortUrlVisit:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialShortUrlVisit(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *OfficialShortUrlVisit) GroupBy(keyField string, inputRows ...[]*OfficialShortUrlVisit) map[string][]*OfficialShortUrlVisit {
	var rows Slice_OfficialShortUrlVisit
	if len(inputRows) > 0 {
		rows = Slice_OfficialShortUrlVisit(inputRows[0])
	} else {
		rows = Slice_OfficialShortUrlVisit(a.Objects())
	}
	return rows.GroupBy(keyField)
}

func (a *OfficialShortUrlVisit) KeyBy(keyField string, inputRows ...[]*OfficialShortUrlVisit) map[string]*OfficialShortUrlVisit {
	var rows Slice_OfficialShortUrlVisit
	if len(inputRows) > 0 {
		rows = Slice_OfficialShortUrlVisit(inputRows[0])
	} else {
		rows = Slice_OfficialShortUrlVisit(a.Objects())
	}
	return rows.KeyBy(keyField)
}

func (a *OfficialShortUrlVisit) AsKV(keyField string, valueField string, inputRows ...[]*OfficialShortUrlVisit) param.Store {
	var rows Slice_OfficialShortUrlVisit
	if len(inputRows) > 0 {
		rows = Slice_OfficialShortUrlVisit(inputRows[0])
	} else {
		rows = Slice_OfficialShortUrlVisit(a.Objects())
	}
	return rows.AsKV(keyField, valueField)
}

func (a *OfficialShortUrlVisit) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*OfficialShortUrlVisit:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialShortUrlVisit(*v))
		case []*OfficialShortUrlVisit:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialShortUrlVisit(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *OfficialShortUrlVisit) Insert() (pk interface{}, err error) {
	a.Created = int(time.Now().Unix())
	if len(a.OwnerType) == 0 {
		a.OwnerType = "customer"
	}
	if a.base.Eventable() {
		err = DBI.Fire("creating", a, nil)
		if err != nil {
			return
		}
	}
	pk, err = a.Param(nil).SetSend(a).Insert()

	if err == nil && a.base.Eventable() {
		err = DBI.Fire("created", a, nil)
	}
	return
}

func (a *OfficialShortUrlVisit) Update(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if len(a.OwnerType) == 0 {
		a.OwnerType = "customer"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Update()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(a).Update(); err != nil {
		return
	}
	return DBI.Fire("updated", a, mw, args...)
}

func (a *OfficialShortUrlVisit) Updatex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {

	if len(a.OwnerType) == 0 {
		a.OwnerType = "customer"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Updatex()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).SetSend(a).Updatex(); err != nil {
		return
	}
	err = DBI.Fire("updated", a, mw, args...)
	return
}

func (a *OfficialShortUrlVisit) UpdateByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (err error) {

	if len(a.OwnerType) == 0 {
		a.OwnerType = "customer"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdateByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).UpdateByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *OfficialShortUrlVisit) UpdatexByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (affected int64, err error) {

	if len(a.OwnerType) == 0 {
		a.OwnerType = "customer"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdatexByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).UpdatexByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *OfficialShortUrlVisit) UpdateField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (err error) {
	return a.UpdateFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *OfficialShortUrlVisit) UpdatexField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (affected int64, err error) {
	return a.UpdatexFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *OfficialShortUrlVisit) UpdateFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (err error) {

	if val, ok := kvset["owner_type"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["owner_type"] = "customer"
		}
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(kvset).Update()
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(kvset).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, editColumns, mw, args...)
}

func (a *OfficialShortUrlVisit) UpdatexFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (affected int64, err error) {

	if val, ok := kvset["owner_type"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["owner_type"] = "customer"
		}
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(kvset).Updatex()
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).SetSend(kvset).Updatex(); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", &m, editColumns, mw, args...)
	return
}

func (a *OfficialShortUrlVisit) UpdateValues(mw func(db.Result) db.Result, keysValues *db.KeysValues, args ...interface{}) (err error) {
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(keysValues).Update()
	}
	m := *a
	m.FromRow(keysValues.Map())
	if err = DBI.FireUpdate("updating", &m, keysValues.Keys(), mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(keysValues).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, keysValues.Keys(), mw, args...)
}

func (a *OfficialShortUrlVisit) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = a.Param(mw, args...).SetSend(a).Upsert(func() error {
		if len(a.OwnerType) == 0 {
			a.OwnerType = "customer"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("updating", a, mw, args...)
	}, func() error {
		a.Created = int(time.Now().Unix())
		if len(a.OwnerType) == 0 {
			a.OwnerType = "customer"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("creating", a, nil)
	})

	if err == nil && a.base.Eventable() {
		if pk == nil {
			err = DBI.Fire("updated", a, mw, args...)
		} else {
			err = DBI.Fire("created", a, nil)
		}
	}
	return
}

func (a *OfficialShortUrlVisit) Delete(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Delete()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).Delete(); err != nil {
		return
	}
	return DBI.Fire("deleted", a, mw, args...)
}

func (a *OfficialShortUrlVisit) Deletex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Deletex()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).Deletex(); err != nil {
		return
	}
	err = DBI.Fire("deleted", a, mw, args...)
	return
}

func (a *OfficialShortUrlVisit) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return a.Param(mw, args...).Count()
}

func (a *OfficialShortUrlVisit) Exists(mw func(db.Result) db.Result, args ...interface{}) (bool, error) {
	return a.Param(mw, args...).Exists()
}

func (a *OfficialShortUrlVisit) Reset() *OfficialShortUrlVisit {
	a.OwnerId = 0
	a.OwnerType = ``
	a.UrlId = 0
	a.DomainId = 0
	a.Year = 0
	a.Month = 0
	a.Day = 0
	a.Hour = 0
	a.Ip = ``
	a.Referer = ``
	a.Language = ``
	a.Country = ``
	a.Region = ``
	a.Province = ``
	a.City = ``
	a.Isp = ``
	a.Os = ``
	a.OsVersion = ``
	a.Browser = ``
	a.BrowserVersion = ``
	a.Created = 0
	return a
}

func (a *OfficialShortUrlVisit) AsMap(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		r["OwnerId"] = a.OwnerId
		r["OwnerType"] = a.OwnerType
		r["UrlId"] = a.UrlId
		r["DomainId"] = a.DomainId
		r["Year"] = a.Year
		r["Month"] = a.Month
		r["Day"] = a.Day
		r["Hour"] = a.Hour
		r["Ip"] = a.Ip
		r["Referer"] = a.Referer
		r["Language"] = a.Language
		r["Country"] = a.Country
		r["Region"] = a.Region
		r["Province"] = a.Province
		r["City"] = a.City
		r["Isp"] = a.Isp
		r["Os"] = a.Os
		r["OsVersion"] = a.OsVersion
		r["Browser"] = a.Browser
		r["BrowserVersion"] = a.BrowserVersion
		r["Created"] = a.Created
		return r
	}
	for _, field := range onlyFields {
		switch field {
		case "OwnerId":
			r["OwnerId"] = a.OwnerId
		case "OwnerType":
			r["OwnerType"] = a.OwnerType
		case "UrlId":
			r["UrlId"] = a.UrlId
		case "DomainId":
			r["DomainId"] = a.DomainId
		case "Year":
			r["Year"] = a.Year
		case "Month":
			r["Month"] = a.Month
		case "Day":
			r["Day"] = a.Day
		case "Hour":
			r["Hour"] = a.Hour
		case "Ip":
			r["Ip"] = a.Ip
		case "Referer":
			r["Referer"] = a.Referer
		case "Language":
			r["Language"] = a.Language
		case "Country":
			r["Country"] = a.Country
		case "Region":
			r["Region"] = a.Region
		case "Province":
			r["Province"] = a.Province
		case "City":
			r["City"] = a.City
		case "Isp":
			r["Isp"] = a.Isp
		case "Os":
			r["Os"] = a.Os
		case "OsVersion":
			r["OsVersion"] = a.OsVersion
		case "Browser":
			r["Browser"] = a.Browser
		case "BrowserVersion":
			r["BrowserVersion"] = a.BrowserVersion
		case "Created":
			r["Created"] = a.Created
		}
	}
	return r
}

func (a *OfficialShortUrlVisit) FromRow(row map[string]interface{}) {
	for key, value := range row {
		switch key {
		case "owner_id":
			a.OwnerId = param.AsUint64(value)
		case "owner_type":
			a.OwnerType = param.AsString(value)
		case "url_id":
			a.UrlId = param.AsUint64(value)
		case "domain_id":
			a.DomainId = param.AsUint64(value)
		case "year":
			a.Year = param.AsUint(value)
		case "month":
			a.Month = param.AsUint(value)
		case "day":
			a.Day = param.AsUint(value)
		case "hour":
			a.Hour = param.AsUint(value)
		case "ip":
			a.Ip = param.AsString(value)
		case "referer":
			a.Referer = param.AsString(value)
		case "language":
			a.Language = param.AsString(value)
		case "country":
			a.Country = param.AsString(value)
		case "region":
			a.Region = param.AsString(value)
		case "province":
			a.Province = param.AsString(value)
		case "city":
			a.City = param.AsString(value)
		case "isp":
			a.Isp = param.AsString(value)
		case "os":
			a.Os = param.AsString(value)
		case "os_version":
			a.OsVersion = param.AsString(value)
		case "browser":
			a.Browser = param.AsString(value)
		case "browser_version":
			a.BrowserVersion = param.AsString(value)
		case "created":
			a.Created = param.AsInt(value)
		}
	}
}

func (a *OfficialShortUrlVisit) Set(key interface{}, value ...interface{}) {
	switch k := key.(type) {
	case map[string]interface{}:
		for kk, vv := range k {
			a.Set(kk, vv)
		}
	default:
		var (
			kk string
			vv interface{}
		)
		if k, y := key.(string); y {
			kk = k
		} else {
			kk = fmt.Sprint(key)
		}
		if len(value) > 0 {
			vv = value[0]
		}
		switch kk {
		case "OwnerId":
			a.OwnerId = param.AsUint64(vv)
		case "OwnerType":
			a.OwnerType = param.AsString(vv)
		case "UrlId":
			a.UrlId = param.AsUint64(vv)
		case "DomainId":
			a.DomainId = param.AsUint64(vv)
		case "Year":
			a.Year = param.AsUint(vv)
		case "Month":
			a.Month = param.AsUint(vv)
		case "Day":
			a.Day = param.AsUint(vv)
		case "Hour":
			a.Hour = param.AsUint(vv)
		case "Ip":
			a.Ip = param.AsString(vv)
		case "Referer":
			a.Referer = param.AsString(vv)
		case "Language":
			a.Language = param.AsString(vv)
		case "Country":
			a.Country = param.AsString(vv)
		case "Region":
			a.Region = param.AsString(vv)
		case "Province":
			a.Province = param.AsString(vv)
		case "City":
			a.City = param.AsString(vv)
		case "Isp":
			a.Isp = param.AsString(vv)
		case "Os":
			a.Os = param.AsString(vv)
		case "OsVersion":
			a.OsVersion = param.AsString(vv)
		case "Browser":
			a.Browser = param.AsString(vv)
		case "BrowserVersion":
			a.BrowserVersion = param.AsString(vv)
		case "Created":
			a.Created = param.AsInt(vv)
		}
	}
}

func (a *OfficialShortUrlVisit) AsRow(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		r["owner_id"] = a.OwnerId
		r["owner_type"] = a.OwnerType
		r["url_id"] = a.UrlId
		r["domain_id"] = a.DomainId
		r["year"] = a.Year
		r["month"] = a.Month
		r["day"] = a.Day
		r["hour"] = a.Hour
		r["ip"] = a.Ip
		r["referer"] = a.Referer
		r["language"] = a.Language
		r["country"] = a.Country
		r["region"] = a.Region
		r["province"] = a.Province
		r["city"] = a.City
		r["isp"] = a.Isp
		r["os"] = a.Os
		r["os_version"] = a.OsVersion
		r["browser"] = a.Browser
		r["browser_version"] = a.BrowserVersion
		r["created"] = a.Created
		return r
	}
	for _, field := range onlyFields {
		switch field {
		case "owner_id":
			r["owner_id"] = a.OwnerId
		case "owner_type":
			r["owner_type"] = a.OwnerType
		case "url_id":
			r["url_id"] = a.UrlId
		case "domain_id":
			r["domain_id"] = a.DomainId
		case "year":
			r["year"] = a.Year
		case "month":
			r["month"] = a.Month
		case "day":
			r["day"] = a.Day
		case "hour":
			r["hour"] = a.Hour
		case "ip":
			r["ip"] = a.Ip
		case "referer":
			r["referer"] = a.Referer
		case "language":
			r["language"] = a.Language
		case "country":
			r["country"] = a.Country
		case "region":
			r["region"] = a.Region
		case "province":
			r["province"] = a.Province
		case "city":
			r["city"] = a.City
		case "isp":
			r["isp"] = a.Isp
		case "os":
			r["os"] = a.Os
		case "os_version":
			r["os_version"] = a.OsVersion
		case "browser":
			r["browser"] = a.Browser
		case "browser_version":
			r["browser_version"] = a.BrowserVersion
		case "created":
			r["created"] = a.Created
		}
	}
	return r
}

func (a *OfficialShortUrlVisit) ListPage(cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, nil, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *OfficialShortUrlVisit) ListPageAs(recv interface{}, cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, recv, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *OfficialShortUrlVisit) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = a.AsRow()
	}
	return DBI.Fields.BatchValidate(a.Short_(), kvset)
}

func (a *OfficialShortUrlVisit) Validate(field string, value interface{}) error {
	return DBI.Fields.Validate(a.Short_(), field, value)
}
