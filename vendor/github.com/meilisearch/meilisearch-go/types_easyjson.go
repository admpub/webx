// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package meilisearch

import (
	json "encoding/json"
	_v4 "github.com/golang-jwt/jwt/v4"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo(in *jlexer.Lexer, out *Version) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commitSha":
			out.CommitSha = string(in.String())
		case "commitDate":
			out.CommitDate = string(in.String())
		case "pkgVersion":
			out.PkgVersion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo(out *jwriter.Writer, in Version) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commitSha\":"
		out.RawString(prefix[1:])
		out.String(string(in.CommitSha))
	}
	{
		const prefix string = ",\"commitDate\":"
		out.RawString(prefix)
		out.String(string(in.CommitDate))
	}
	{
		const prefix string = ",\"pkgVersion\":"
		out.RawString(prefix)
		out.String(string(in.PkgVersion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Version) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Version) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Version) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Version) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo1(in *jlexer.Lexer, out *UpdateIndexRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "primaryKey":
			out.PrimaryKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo1(out *jwriter.Writer, in UpdateIndexRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"primaryKey\":"
		out.RawString(prefix[1:])
		out.String(string(in.PrimaryKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateIndexRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateIndexRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateIndexRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateIndexRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo1(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo2(in *jlexer.Lexer, out *TypoTolerance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "minWordSizeForTypos":
			(out.MinWordSizeForTypos).UnmarshalEasyJSON(in)
		case "disableOnWords":
			if in.IsNull() {
				in.Skip()
				out.DisableOnWords = nil
			} else {
				in.Delim('[')
				if out.DisableOnWords == nil {
					if !in.IsDelim(']') {
						out.DisableOnWords = make([]string, 0, 4)
					} else {
						out.DisableOnWords = []string{}
					}
				} else {
					out.DisableOnWords = (out.DisableOnWords)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.DisableOnWords = append(out.DisableOnWords, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "disableOnAttributes":
			if in.IsNull() {
				in.Skip()
				out.DisableOnAttributes = nil
			} else {
				in.Delim('[')
				if out.DisableOnAttributes == nil {
					if !in.IsDelim(']') {
						out.DisableOnAttributes = make([]string, 0, 4)
					} else {
						out.DisableOnAttributes = []string{}
					}
				} else {
					out.DisableOnAttributes = (out.DisableOnAttributes)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.DisableOnAttributes = append(out.DisableOnAttributes, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo2(out *jwriter.Writer, in TypoTolerance) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Enabled {
		const prefix string = ",\"enabled\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.Enabled))
	}
	if true {
		const prefix string = ",\"minWordSizeForTypos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.MinWordSizeForTypos).MarshalEasyJSON(out)
	}
	if len(in.DisableOnWords) != 0 {
		const prefix string = ",\"disableOnWords\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.DisableOnWords {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	if len(in.DisableOnAttributes) != 0 {
		const prefix string = ",\"disableOnAttributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.DisableOnAttributes {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TypoTolerance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TypoTolerance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TypoTolerance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TypoTolerance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo2(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo3(in *jlexer.Lexer, out *TenantTokenOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "APIKey":
			out.APIKey = string(in.String())
		case "ExpiresAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ExpiresAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo3(out *jwriter.Writer, in TenantTokenOptions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"APIKey\":"
		out.RawString(prefix[1:])
		out.String(string(in.APIKey))
	}
	{
		const prefix string = ",\"ExpiresAt\":"
		out.RawString(prefix)
		out.Raw((in.ExpiresAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TenantTokenOptions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TenantTokenOptions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TenantTokenOptions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TenantTokenOptions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo3(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo4(in *jlexer.Lexer, out *TenantTokenClaims) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiKeyUid":
			out.APIKeyUID = string(in.String())
		case "searchRules":
			if m, ok := out.SearchRules.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.SearchRules.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.SearchRules = in.Interface()
			}
		case "iss":
			out.Issuer = string(in.String())
		case "sub":
			out.Subject = string(in.String())
		case "aud":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Audience).UnmarshalJSON(data))
			}
		case "exp":
			if in.IsNull() {
				in.Skip()
				out.ExpiresAt = nil
			} else {
				if out.ExpiresAt == nil {
					out.ExpiresAt = new(_v4.NumericDate)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExpiresAt).UnmarshalJSON(data))
				}
			}
		case "nbf":
			if in.IsNull() {
				in.Skip()
				out.NotBefore = nil
			} else {
				if out.NotBefore == nil {
					out.NotBefore = new(_v4.NumericDate)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NotBefore).UnmarshalJSON(data))
				}
			}
		case "iat":
			if in.IsNull() {
				in.Skip()
				out.IssuedAt = nil
			} else {
				if out.IssuedAt == nil {
					out.IssuedAt = new(_v4.NumericDate)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.IssuedAt).UnmarshalJSON(data))
				}
			}
		case "jti":
			out.ID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo4(out *jwriter.Writer, in TenantTokenClaims) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"apiKeyUid\":"
		out.RawString(prefix[1:])
		out.String(string(in.APIKeyUID))
	}
	{
		const prefix string = ",\"searchRules\":"
		out.RawString(prefix)
		if m, ok := in.SearchRules.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.SearchRules.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.SearchRules))
		}
	}
	if in.Issuer != "" {
		const prefix string = ",\"iss\":"
		out.RawString(prefix)
		out.String(string(in.Issuer))
	}
	if in.Subject != "" {
		const prefix string = ",\"sub\":"
		out.RawString(prefix)
		out.String(string(in.Subject))
	}
	if len(in.Audience) != 0 {
		const prefix string = ",\"aud\":"
		out.RawString(prefix)
		out.Raw((in.Audience).MarshalJSON())
	}
	if in.ExpiresAt != nil {
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Raw((*in.ExpiresAt).MarshalJSON())
	}
	if in.NotBefore != nil {
		const prefix string = ",\"nbf\":"
		out.RawString(prefix)
		out.Raw((*in.NotBefore).MarshalJSON())
	}
	if in.IssuedAt != nil {
		const prefix string = ",\"iat\":"
		out.RawString(prefix)
		out.Raw((*in.IssuedAt).MarshalJSON())
	}
	if in.ID != "" {
		const prefix string = ",\"jti\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TenantTokenClaims) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TenantTokenClaims) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TenantTokenClaims) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TenantTokenClaims) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo4(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo5(in *jlexer.Lexer, out *TasksQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limit":
			out.Limit = int64(in.Int64())
		case "from":
			out.From = int64(in.Int64())
		case "indexUid":
			if in.IsNull() {
				in.Skip()
				out.IndexUID = nil
			} else {
				in.Delim('[')
				if out.IndexUID == nil {
					if !in.IsDelim(']') {
						out.IndexUID = make([]string, 0, 4)
					} else {
						out.IndexUID = []string{}
					}
				} else {
					out.IndexUID = (out.IndexUID)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.IndexUID = append(out.IndexUID, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				in.Delim('[')
				if out.Status == nil {
					if !in.IsDelim(']') {
						out.Status = make([]string, 0, 4)
					} else {
						out.Status = []string{}
					}
				} else {
					out.Status = (out.Status)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.Status = append(out.Status, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				in.Delim('[')
				if out.Type == nil {
					if !in.IsDelim(']') {
						out.Type = make([]string, 0, 4)
					} else {
						out.Type = []string{}
					}
				} else {
					out.Type = (out.Type)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Type = append(out.Type, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo5(out *jwriter.Writer, in TasksQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Limit))
	}
	if in.From != 0 {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.From))
	}
	if len(in.IndexUID) != 0 {
		const prefix string = ",\"indexUid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.IndexUID {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	if len(in.Status) != 0 {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.Status {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	if len(in.Type) != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Type {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TasksQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TasksQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TasksQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TasksQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo5(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo6(in *jlexer.Lexer, out *TaskResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make([]Task, 0, 0)
					} else {
						out.Results = []Task{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v16 Task
					(v16).UnmarshalEasyJSON(in)
					out.Results = append(out.Results, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "limit":
			out.Limit = int64(in.Int64())
		case "from":
			out.From = int64(in.Int64())
		case "next":
			out.Next = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo6(out *jwriter.Writer, in TaskResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"results\":"
		out.RawString(prefix[1:])
		if in.Results == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Results {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int64(int64(in.Limit))
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.Int64(int64(in.From))
	}
	{
		const prefix string = ",\"next\":"
		out.RawString(prefix)
		out.Int64(int64(in.Next))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo6(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo7(in *jlexer.Lexer, out *TaskInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = TaskStatus(in.String())
		case "taskUid":
			out.TaskUID = int64(in.Int64())
		case "indexUid":
			out.IndexUID = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "error":
			easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo8(in, &out.Error)
		case "duration":
			out.Duration = string(in.String())
		case "enqueuedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EnqueuedAt).UnmarshalJSON(data))
			}
		case "startedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartedAt).UnmarshalJSON(data))
			}
		case "finishedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FinishedAt).UnmarshalJSON(data))
			}
		case "details":
			(out.Details).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo7(out *jwriter.Writer, in TaskInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if in.TaskUID != 0 {
		const prefix string = ",\"taskUid\":"
		out.RawString(prefix)
		out.Int64(int64(in.TaskUID))
	}
	{
		const prefix string = ",\"indexUid\":"
		out.RawString(prefix)
		out.String(string(in.IndexUID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if true {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo8(out, in.Error)
	}
	if in.Duration != "" {
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.String(string(in.Duration))
	}
	{
		const prefix string = ",\"enqueuedAt\":"
		out.RawString(prefix)
		out.Raw((in.EnqueuedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"startedAt\":"
		out.RawString(prefix)
		out.Raw((in.StartedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"finishedAt\":"
		out.RawString(prefix)
		out.Raw((in.FinishedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"details\":"
		out.RawString(prefix)
		(in.Details).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo7(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo8(in *jlexer.Lexer, out *meilisearchApiError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		case "code":
			out.Code = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "link":
			out.Link = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo8(out *jwriter.Writer, in meilisearchApiError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo9(in *jlexer.Lexer, out *Task) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = TaskStatus(in.String())
		case "uid":
			out.UID = int64(in.Int64())
		case "taskUid":
			out.TaskUID = int64(in.Int64())
		case "indexUid":
			out.IndexUID = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "error":
			easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo8(in, &out.Error)
		case "duration":
			out.Duration = string(in.String())
		case "enqueuedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EnqueuedAt).UnmarshalJSON(data))
			}
		case "startedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartedAt).UnmarshalJSON(data))
			}
		case "finishedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FinishedAt).UnmarshalJSON(data))
			}
		case "details":
			(out.Details).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo9(out *jwriter.Writer, in Task) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if in.UID != 0 {
		const prefix string = ",\"uid\":"
		out.RawString(prefix)
		out.Int64(int64(in.UID))
	}
	if in.TaskUID != 0 {
		const prefix string = ",\"taskUid\":"
		out.RawString(prefix)
		out.Int64(int64(in.TaskUID))
	}
	{
		const prefix string = ",\"indexUid\":"
		out.RawString(prefix)
		out.String(string(in.IndexUID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if true {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo8(out, in.Error)
	}
	if in.Duration != "" {
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.String(string(in.Duration))
	}
	{
		const prefix string = ",\"enqueuedAt\":"
		out.RawString(prefix)
		out.Raw((in.EnqueuedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"startedAt\":"
		out.RawString(prefix)
		out.Raw((in.StartedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"finishedAt\":"
		out.RawString(prefix)
		out.Raw((in.FinishedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"details\":"
		out.RawString(prefix)
		(in.Details).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Task) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Task) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Task) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Task) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo9(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo10(in *jlexer.Lexer, out *StatsIndex) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "numberOfDocuments":
			out.NumberOfDocuments = int64(in.Int64())
		case "isIndexing":
			out.IsIndexing = bool(in.Bool())
		case "fieldDistribution":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.FieldDistribution = make(map[string]int64)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v19 int64
					v19 = int64(in.Int64())
					(out.FieldDistribution)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo10(out *jwriter.Writer, in StatsIndex) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"numberOfDocuments\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.NumberOfDocuments))
	}
	{
		const prefix string = ",\"isIndexing\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsIndexing))
	}
	{
		const prefix string = ",\"fieldDistribution\":"
		out.RawString(prefix)
		if in.FieldDistribution == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v20First := true
			for v20Name, v20Value := range in.FieldDistribution {
				if v20First {
					v20First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v20Name))
				out.RawByte(':')
				out.Int64(int64(v20Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatsIndex) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatsIndex) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatsIndex) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatsIndex) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo10(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo11(in *jlexer.Lexer, out *Stats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "databaseSize":
			out.DatabaseSize = int64(in.Int64())
		case "lastUpdate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastUpdate).UnmarshalJSON(data))
			}
		case "indexes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Indexes = make(map[string]StatsIndex)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v21 StatsIndex
					(v21).UnmarshalEasyJSON(in)
					(out.Indexes)[key] = v21
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo11(out *jwriter.Writer, in Stats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"databaseSize\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.DatabaseSize))
	}
	{
		const prefix string = ",\"lastUpdate\":"
		out.RawString(prefix)
		out.Raw((in.LastUpdate).MarshalJSON())
	}
	{
		const prefix string = ",\"indexes\":"
		out.RawString(prefix)
		if in.Indexes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v22First := true
			for v22Name, v22Value := range in.Indexes {
				if v22First {
					v22First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v22Name))
				out.RawByte(':')
				(v22Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo11(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo12(in *jlexer.Lexer, out *Settings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rankingRules":
			if in.IsNull() {
				in.Skip()
				out.RankingRules = nil
			} else {
				in.Delim('[')
				if out.RankingRules == nil {
					if !in.IsDelim(']') {
						out.RankingRules = make([]string, 0, 4)
					} else {
						out.RankingRules = []string{}
					}
				} else {
					out.RankingRules = (out.RankingRules)[:0]
				}
				for !in.IsDelim(']') {
					var v23 string
					v23 = string(in.String())
					out.RankingRules = append(out.RankingRules, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "distinctAttribute":
			if in.IsNull() {
				in.Skip()
				out.DistinctAttribute = nil
			} else {
				if out.DistinctAttribute == nil {
					out.DistinctAttribute = new(string)
				}
				*out.DistinctAttribute = string(in.String())
			}
		case "searchableAttributes":
			if in.IsNull() {
				in.Skip()
				out.SearchableAttributes = nil
			} else {
				in.Delim('[')
				if out.SearchableAttributes == nil {
					if !in.IsDelim(']') {
						out.SearchableAttributes = make([]string, 0, 4)
					} else {
						out.SearchableAttributes = []string{}
					}
				} else {
					out.SearchableAttributes = (out.SearchableAttributes)[:0]
				}
				for !in.IsDelim(']') {
					var v24 string
					v24 = string(in.String())
					out.SearchableAttributes = append(out.SearchableAttributes, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "displayedAttributes":
			if in.IsNull() {
				in.Skip()
				out.DisplayedAttributes = nil
			} else {
				in.Delim('[')
				if out.DisplayedAttributes == nil {
					if !in.IsDelim(']') {
						out.DisplayedAttributes = make([]string, 0, 4)
					} else {
						out.DisplayedAttributes = []string{}
					}
				} else {
					out.DisplayedAttributes = (out.DisplayedAttributes)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.DisplayedAttributes = append(out.DisplayedAttributes, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "stopWords":
			if in.IsNull() {
				in.Skip()
				out.StopWords = nil
			} else {
				in.Delim('[')
				if out.StopWords == nil {
					if !in.IsDelim(']') {
						out.StopWords = make([]string, 0, 4)
					} else {
						out.StopWords = []string{}
					}
				} else {
					out.StopWords = (out.StopWords)[:0]
				}
				for !in.IsDelim(']') {
					var v26 string
					v26 = string(in.String())
					out.StopWords = append(out.StopWords, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "synonyms":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Synonyms = make(map[string][]string)
				} else {
					out.Synonyms = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v27 []string
					if in.IsNull() {
						in.Skip()
						v27 = nil
					} else {
						in.Delim('[')
						if v27 == nil {
							if !in.IsDelim(']') {
								v27 = make([]string, 0, 4)
							} else {
								v27 = []string{}
							}
						} else {
							v27 = (v27)[:0]
						}
						for !in.IsDelim(']') {
							var v28 string
							v28 = string(in.String())
							v27 = append(v27, v28)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Synonyms)[key] = v27
					in.WantComma()
				}
				in.Delim('}')
			}
		case "filterableAttributes":
			if in.IsNull() {
				in.Skip()
				out.FilterableAttributes = nil
			} else {
				in.Delim('[')
				if out.FilterableAttributes == nil {
					if !in.IsDelim(']') {
						out.FilterableAttributes = make([]string, 0, 4)
					} else {
						out.FilterableAttributes = []string{}
					}
				} else {
					out.FilterableAttributes = (out.FilterableAttributes)[:0]
				}
				for !in.IsDelim(']') {
					var v29 string
					v29 = string(in.String())
					out.FilterableAttributes = append(out.FilterableAttributes, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sortableAttributes":
			if in.IsNull() {
				in.Skip()
				out.SortableAttributes = nil
			} else {
				in.Delim('[')
				if out.SortableAttributes == nil {
					if !in.IsDelim(']') {
						out.SortableAttributes = make([]string, 0, 4)
					} else {
						out.SortableAttributes = []string{}
					}
				} else {
					out.SortableAttributes = (out.SortableAttributes)[:0]
				}
				for !in.IsDelim(']') {
					var v30 string
					v30 = string(in.String())
					out.SortableAttributes = append(out.SortableAttributes, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "typoTolerance":
			if in.IsNull() {
				in.Skip()
				out.TypoTolerance = nil
			} else {
				if out.TypoTolerance == nil {
					out.TypoTolerance = new(TypoTolerance)
				}
				(*out.TypoTolerance).UnmarshalEasyJSON(in)
			}
		case "pagination":
			if in.IsNull() {
				in.Skip()
				out.Pagination = nil
			} else {
				if out.Pagination == nil {
					out.Pagination = new(Pagination)
				}
				(*out.Pagination).UnmarshalEasyJSON(in)
			}
		case "faceting":
			if in.IsNull() {
				in.Skip()
				out.Faceting = nil
			} else {
				if out.Faceting == nil {
					out.Faceting = new(Faceting)
				}
				(*out.Faceting).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo12(out *jwriter.Writer, in Settings) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.RankingRules) != 0 {
		const prefix string = ",\"rankingRules\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v31, v32 := range in.RankingRules {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.String(string(v32))
			}
			out.RawByte(']')
		}
	}
	if in.DistinctAttribute != nil {
		const prefix string = ",\"distinctAttribute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.DistinctAttribute))
	}
	if len(in.SearchableAttributes) != 0 {
		const prefix string = ",\"searchableAttributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v33, v34 := range in.SearchableAttributes {
				if v33 > 0 {
					out.RawByte(',')
				}
				out.String(string(v34))
			}
			out.RawByte(']')
		}
	}
	if len(in.DisplayedAttributes) != 0 {
		const prefix string = ",\"displayedAttributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.DisplayedAttributes {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.String(string(v36))
			}
			out.RawByte(']')
		}
	}
	if len(in.StopWords) != 0 {
		const prefix string = ",\"stopWords\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v37, v38 := range in.StopWords {
				if v37 > 0 {
					out.RawByte(',')
				}
				out.String(string(v38))
			}
			out.RawByte(']')
		}
	}
	if len(in.Synonyms) != 0 {
		const prefix string = ",\"synonyms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v39First := true
			for v39Name, v39Value := range in.Synonyms {
				if v39First {
					v39First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v39Name))
				out.RawByte(':')
				if v39Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v40, v41 := range v39Value {
						if v40 > 0 {
							out.RawByte(',')
						}
						out.String(string(v41))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.FilterableAttributes) != 0 {
		const prefix string = ",\"filterableAttributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v42, v43 := range in.FilterableAttributes {
				if v42 > 0 {
					out.RawByte(',')
				}
				out.String(string(v43))
			}
			out.RawByte(']')
		}
	}
	if len(in.SortableAttributes) != 0 {
		const prefix string = ",\"sortableAttributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v44, v45 := range in.SortableAttributes {
				if v44 > 0 {
					out.RawByte(',')
				}
				out.String(string(v45))
			}
			out.RawByte(']')
		}
	}
	if in.TypoTolerance != nil {
		const prefix string = ",\"typoTolerance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TypoTolerance).MarshalEasyJSON(out)
	}
	if in.Pagination != nil {
		const prefix string = ",\"pagination\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Pagination).MarshalEasyJSON(out)
	}
	if in.Faceting != nil {
		const prefix string = ",\"faceting\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Faceting).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Settings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Settings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Settings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Settings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo12(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo13(in *jlexer.Lexer, out *SearchResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hits":
			if in.IsNull() {
				in.Skip()
				out.Hits = nil
			} else {
				in.Delim('[')
				if out.Hits == nil {
					if !in.IsDelim(']') {
						out.Hits = make([]interface{}, 0, 4)
					} else {
						out.Hits = []interface{}{}
					}
				} else {
					out.Hits = (out.Hits)[:0]
				}
				for !in.IsDelim(']') {
					var v46 interface{}
					if m, ok := v46.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v46.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v46 = in.Interface()
					}
					out.Hits = append(out.Hits, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "estimatedTotalHits":
			out.EstimatedTotalHits = int64(in.Int64())
		case "offset":
			out.Offset = int64(in.Int64())
		case "limit":
			out.Limit = int64(in.Int64())
		case "processingTimeMs":
			out.ProcessingTimeMs = int64(in.Int64())
		case "query":
			out.Query = string(in.String())
		case "facetDistribution":
			if m, ok := out.FacetDistribution.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.FacetDistribution.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.FacetDistribution = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo13(out *jwriter.Writer, in SearchResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hits\":"
		out.RawString(prefix[1:])
		if in.Hits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Hits {
				if v47 > 0 {
					out.RawByte(',')
				}
				if m, ok := v48.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v48.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v48))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"estimatedTotalHits\":"
		out.RawString(prefix)
		out.Int64(int64(in.EstimatedTotalHits))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int64(int64(in.Offset))
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int64(int64(in.Limit))
	}
	{
		const prefix string = ",\"processingTimeMs\":"
		out.RawString(prefix)
		out.Int64(int64(in.ProcessingTimeMs))
	}
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix)
		out.String(string(in.Query))
	}
	if in.FacetDistribution != nil {
		const prefix string = ",\"facetDistribution\":"
		out.RawString(prefix)
		if m, ok := in.FacetDistribution.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.FacetDistribution.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.FacetDistribution))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo13(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo14(in *jlexer.Lexer, out *SearchRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Offset":
			out.Offset = int64(in.Int64())
		case "Limit":
			out.Limit = int64(in.Int64())
		case "AttributesToRetrieve":
			if in.IsNull() {
				in.Skip()
				out.AttributesToRetrieve = nil
			} else {
				in.Delim('[')
				if out.AttributesToRetrieve == nil {
					if !in.IsDelim(']') {
						out.AttributesToRetrieve = make([]string, 0, 4)
					} else {
						out.AttributesToRetrieve = []string{}
					}
				} else {
					out.AttributesToRetrieve = (out.AttributesToRetrieve)[:0]
				}
				for !in.IsDelim(']') {
					var v49 string
					v49 = string(in.String())
					out.AttributesToRetrieve = append(out.AttributesToRetrieve, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "AttributesToCrop":
			if in.IsNull() {
				in.Skip()
				out.AttributesToCrop = nil
			} else {
				in.Delim('[')
				if out.AttributesToCrop == nil {
					if !in.IsDelim(']') {
						out.AttributesToCrop = make([]string, 0, 4)
					} else {
						out.AttributesToCrop = []string{}
					}
				} else {
					out.AttributesToCrop = (out.AttributesToCrop)[:0]
				}
				for !in.IsDelim(']') {
					var v50 string
					v50 = string(in.String())
					out.AttributesToCrop = append(out.AttributesToCrop, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CropLength":
			out.CropLength = int64(in.Int64())
		case "CropMarker":
			out.CropMarker = string(in.String())
		case "AttributesToHighlight":
			if in.IsNull() {
				in.Skip()
				out.AttributesToHighlight = nil
			} else {
				in.Delim('[')
				if out.AttributesToHighlight == nil {
					if !in.IsDelim(']') {
						out.AttributesToHighlight = make([]string, 0, 4)
					} else {
						out.AttributesToHighlight = []string{}
					}
				} else {
					out.AttributesToHighlight = (out.AttributesToHighlight)[:0]
				}
				for !in.IsDelim(']') {
					var v51 string
					v51 = string(in.String())
					out.AttributesToHighlight = append(out.AttributesToHighlight, v51)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "HighlightPreTag":
			out.HighlightPreTag = string(in.String())
		case "HighlightPostTag":
			out.HighlightPostTag = string(in.String())
		case "MatchingStrategy":
			out.MatchingStrategy = string(in.String())
		case "Filter":
			if m, ok := out.Filter.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Filter.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Filter = in.Interface()
			}
		case "ShowMatchesPosition":
			out.ShowMatchesPosition = bool(in.Bool())
		case "Facets":
			if in.IsNull() {
				in.Skip()
				out.Facets = nil
			} else {
				in.Delim('[')
				if out.Facets == nil {
					if !in.IsDelim(']') {
						out.Facets = make([]string, 0, 4)
					} else {
						out.Facets = []string{}
					}
				} else {
					out.Facets = (out.Facets)[:0]
				}
				for !in.IsDelim(']') {
					var v52 string
					v52 = string(in.String())
					out.Facets = append(out.Facets, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PlaceholderSearch":
			out.PlaceholderSearch = bool(in.Bool())
		case "Sort":
			if in.IsNull() {
				in.Skip()
				out.Sort = nil
			} else {
				in.Delim('[')
				if out.Sort == nil {
					if !in.IsDelim(']') {
						out.Sort = make([]string, 0, 4)
					} else {
						out.Sort = []string{}
					}
				} else {
					out.Sort = (out.Sort)[:0]
				}
				for !in.IsDelim(']') {
					var v53 string
					v53 = string(in.String())
					out.Sort = append(out.Sort, v53)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo14(out *jwriter.Writer, in SearchRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Offset\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Offset))
	}
	{
		const prefix string = ",\"Limit\":"
		out.RawString(prefix)
		out.Int64(int64(in.Limit))
	}
	{
		const prefix string = ",\"AttributesToRetrieve\":"
		out.RawString(prefix)
		if in.AttributesToRetrieve == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v54, v55 := range in.AttributesToRetrieve {
				if v54 > 0 {
					out.RawByte(',')
				}
				out.String(string(v55))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"AttributesToCrop\":"
		out.RawString(prefix)
		if in.AttributesToCrop == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.AttributesToCrop {
				if v56 > 0 {
					out.RawByte(',')
				}
				out.String(string(v57))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CropLength\":"
		out.RawString(prefix)
		out.Int64(int64(in.CropLength))
	}
	{
		const prefix string = ",\"CropMarker\":"
		out.RawString(prefix)
		out.String(string(in.CropMarker))
	}
	{
		const prefix string = ",\"AttributesToHighlight\":"
		out.RawString(prefix)
		if in.AttributesToHighlight == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v58, v59 := range in.AttributesToHighlight {
				if v58 > 0 {
					out.RawByte(',')
				}
				out.String(string(v59))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"HighlightPreTag\":"
		out.RawString(prefix)
		out.String(string(in.HighlightPreTag))
	}
	{
		const prefix string = ",\"HighlightPostTag\":"
		out.RawString(prefix)
		out.String(string(in.HighlightPostTag))
	}
	{
		const prefix string = ",\"MatchingStrategy\":"
		out.RawString(prefix)
		out.String(string(in.MatchingStrategy))
	}
	{
		const prefix string = ",\"Filter\":"
		out.RawString(prefix)
		if m, ok := in.Filter.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Filter.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Filter))
		}
	}
	{
		const prefix string = ",\"ShowMatchesPosition\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShowMatchesPosition))
	}
	{
		const prefix string = ",\"Facets\":"
		out.RawString(prefix)
		if in.Facets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v60, v61 := range in.Facets {
				if v60 > 0 {
					out.RawByte(',')
				}
				out.String(string(v61))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"PlaceholderSearch\":"
		out.RawString(prefix)
		out.Bool(bool(in.PlaceholderSearch))
	}
	{
		const prefix string = ",\"Sort\":"
		out.RawString(prefix)
		if in.Sort == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v62, v63 := range in.Sort {
				if v62 > 0 {
					out.RawByte(',')
				}
				out.String(string(v63))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo14(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo15(in *jlexer.Lexer, out *Pagination) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "maxTotalHits":
			out.MaxTotalHits = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo15(out *jwriter.Writer, in Pagination) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"maxTotalHits\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.MaxTotalHits))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pagination) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pagination) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pagination) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pagination) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo15(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo16(in *jlexer.Lexer, out *MinWordSizeForTypos) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "oneTypo":
			out.OneTypo = int64(in.Int64())
		case "twoTypos":
			out.TwoTypos = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo16(out *jwriter.Writer, in MinWordSizeForTypos) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OneTypo != 0 {
		const prefix string = ",\"oneTypo\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.OneTypo))
	}
	if in.TwoTypos != 0 {
		const prefix string = ",\"twoTypos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TwoTypos))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MinWordSizeForTypos) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MinWordSizeForTypos) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MinWordSizeForTypos) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MinWordSizeForTypos) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo16(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo17(in *jlexer.Lexer, out *KeysResults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make([]Key, 0, 0)
					} else {
						out.Results = []Key{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v64 Key
					(v64).UnmarshalEasyJSON(in)
					out.Results = append(out.Results, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "offset":
			out.Offset = int64(in.Int64())
		case "limit":
			out.Limit = int64(in.Int64())
		case "total":
			out.Total = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo17(out *jwriter.Writer, in KeysResults) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"results\":"
		out.RawString(prefix[1:])
		if in.Results == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v65, v66 := range in.Results {
				if v65 > 0 {
					out.RawByte(',')
				}
				(v66).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int64(int64(in.Offset))
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int64(int64(in.Limit))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int64(int64(in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KeysResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KeysResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KeysResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KeysResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo17(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo18(in *jlexer.Lexer, out *KeysQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limit":
			out.Limit = int64(in.Int64())
		case "offset":
			out.Offset = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo18(out *jwriter.Writer, in KeysQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Limit))
	}
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Offset))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KeysQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KeysQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KeysQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KeysQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo18(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo19(in *jlexer.Lexer, out *KeyUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo19(out *jwriter.Writer, in KeyUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KeyUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KeyUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KeyUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KeyUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo19(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo20(in *jlexer.Lexer, out *KeyParsed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "uid":
			out.UID = string(in.String())
		case "actions":
			if in.IsNull() {
				in.Skip()
				out.Actions = nil
			} else {
				in.Delim('[')
				if out.Actions == nil {
					if !in.IsDelim(']') {
						out.Actions = make([]string, 0, 4)
					} else {
						out.Actions = []string{}
					}
				} else {
					out.Actions = (out.Actions)[:0]
				}
				for !in.IsDelim(']') {
					var v67 string
					v67 = string(in.String())
					out.Actions = append(out.Actions, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "indexes":
			if in.IsNull() {
				in.Skip()
				out.Indexes = nil
			} else {
				in.Delim('[')
				if out.Indexes == nil {
					if !in.IsDelim(']') {
						out.Indexes = make([]string, 0, 4)
					} else {
						out.Indexes = []string{}
					}
				} else {
					out.Indexes = (out.Indexes)[:0]
				}
				for !in.IsDelim(']') {
					var v68 string
					v68 = string(in.String())
					out.Indexes = append(out.Indexes, v68)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "expiresAt":
			if in.IsNull() {
				in.Skip()
				out.ExpiresAt = nil
			} else {
				if out.ExpiresAt == nil {
					out.ExpiresAt = new(string)
				}
				*out.ExpiresAt = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo20(out *jwriter.Writer, in KeyParsed) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if in.UID != "" {
		const prefix string = ",\"uid\":"
		out.RawString(prefix)
		out.String(string(in.UID))
	}
	if len(in.Actions) != 0 {
		const prefix string = ",\"actions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v69, v70 := range in.Actions {
				if v69 > 0 {
					out.RawByte(',')
				}
				out.String(string(v70))
			}
			out.RawByte(']')
		}
	}
	if len(in.Indexes) != 0 {
		const prefix string = ",\"indexes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v71, v72 := range in.Indexes {
				if v71 > 0 {
					out.RawByte(',')
				}
				out.String(string(v72))
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"expiresAt\":"
		out.RawString(prefix)
		if in.ExpiresAt == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ExpiresAt))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KeyParsed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KeyParsed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KeyParsed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KeyParsed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo20(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo21(in *jlexer.Lexer, out *Key) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "key":
			out.Key = string(in.String())
		case "uid":
			out.UID = string(in.String())
		case "actions":
			if in.IsNull() {
				in.Skip()
				out.Actions = nil
			} else {
				in.Delim('[')
				if out.Actions == nil {
					if !in.IsDelim(']') {
						out.Actions = make([]string, 0, 4)
					} else {
						out.Actions = []string{}
					}
				} else {
					out.Actions = (out.Actions)[:0]
				}
				for !in.IsDelim(']') {
					var v73 string
					v73 = string(in.String())
					out.Actions = append(out.Actions, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "indexes":
			if in.IsNull() {
				in.Skip()
				out.Indexes = nil
			} else {
				in.Delim('[')
				if out.Indexes == nil {
					if !in.IsDelim(']') {
						out.Indexes = make([]string, 0, 4)
					} else {
						out.Indexes = []string{}
					}
				} else {
					out.Indexes = (out.Indexes)[:0]
				}
				for !in.IsDelim(']') {
					var v74 string
					v74 = string(in.String())
					out.Indexes = append(out.Indexes, v74)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "expiresAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ExpiresAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo21(out *jwriter.Writer, in Key) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if in.Key != "" {
		const prefix string = ",\"key\":"
		out.RawString(prefix)
		out.String(string(in.Key))
	}
	if in.UID != "" {
		const prefix string = ",\"uid\":"
		out.RawString(prefix)
		out.String(string(in.UID))
	}
	if len(in.Actions) != 0 {
		const prefix string = ",\"actions\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v75, v76 := range in.Actions {
				if v75 > 0 {
					out.RawByte(',')
				}
				out.String(string(v76))
			}
			out.RawByte(']')
		}
	}
	if len(in.Indexes) != 0 {
		const prefix string = ",\"indexes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v77, v78 := range in.Indexes {
				if v77 > 0 {
					out.RawByte(',')
				}
				out.String(string(v78))
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"expiresAt\":"
		out.RawString(prefix)
		out.Raw((in.ExpiresAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Key) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Key) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Key) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Key) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo21(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo22(in *jlexer.Lexer, out *IndexesResults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make([]Index, 0, 0)
					} else {
						out.Results = []Index{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v79 Index
					(v79).UnmarshalEasyJSON(in)
					out.Results = append(out.Results, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "offset":
			out.Offset = int64(in.Int64())
		case "limit":
			out.Limit = int64(in.Int64())
		case "total":
			out.Total = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo22(out *jwriter.Writer, in IndexesResults) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"results\":"
		out.RawString(prefix[1:])
		if in.Results == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v80, v81 := range in.Results {
				if v80 > 0 {
					out.RawByte(',')
				}
				(v81).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int64(int64(in.Offset))
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int64(int64(in.Limit))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int64(int64(in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IndexesResults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IndexesResults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IndexesResults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IndexesResults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo22(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo23(in *jlexer.Lexer, out *IndexesQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limit":
			out.Limit = int64(in.Int64())
		case "offset":
			out.Offset = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo23(out *jwriter.Writer, in IndexesQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Limit))
	}
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Offset))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IndexesQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IndexesQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IndexesQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IndexesQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo23(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo24(in *jlexer.Lexer, out *Index) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.UID = string(in.String())
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "primaryKey":
			out.PrimaryKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo24(out *jwriter.Writer, in Index) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix[1:])
		out.String(string(in.UID))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	if in.PrimaryKey != "" {
		const prefix string = ",\"primaryKey\":"
		out.RawString(prefix)
		out.String(string(in.PrimaryKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Index) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Index) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Index) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Index) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo24(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo25(in *jlexer.Lexer, out *Health) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo25(out *jwriter.Writer, in Health) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Health) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Health) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Health) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Health) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo25(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo26(in *jlexer.Lexer, out *Faceting) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "maxValuesPerFacet":
			out.MaxValuesPerFacet = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo26(out *jwriter.Writer, in Faceting) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"maxValuesPerFacet\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.MaxValuesPerFacet))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Faceting) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Faceting) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Faceting) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Faceting) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo26(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo27(in *jlexer.Lexer, out *DocumentsResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make([]map[string]interface{}, 0, 8)
					} else {
						out.Results = []map[string]interface{}{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v82 map[string]interface{}
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						v82 = make(map[string]interface{})
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v83 interface{}
							if m, ok := v83.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v83.(json.Unmarshaler); ok {
								_ = m.UnmarshalJSON(in.Raw())
							} else {
								v83 = in.Interface()
							}
							(v82)[key] = v83
							in.WantComma()
						}
						in.Delim('}')
					}
					out.Results = append(out.Results, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "limit":
			out.Limit = int64(in.Int64())
		case "offset":
			out.Offset = int64(in.Int64())
		case "total":
			out.Total = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo27(out *jwriter.Writer, in DocumentsResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"results\":"
		out.RawString(prefix[1:])
		if in.Results == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v84, v85 := range in.Results {
				if v84 > 0 {
					out.RawByte(',')
				}
				if v85 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v86First := true
					for v86Name, v86Value := range v85 {
						if v86First {
							v86First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v86Name))
						out.RawByte(':')
						if m, ok := v86Value.(easyjson.Marshaler); ok {
							m.MarshalEasyJSON(out)
						} else if m, ok := v86Value.(json.Marshaler); ok {
							out.Raw(m.MarshalJSON())
						} else {
							out.Raw(json.Marshal(v86Value))
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int64(int64(in.Limit))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int64(int64(in.Offset))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int64(int64(in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DocumentsResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DocumentsResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DocumentsResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DocumentsResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo27(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo28(in *jlexer.Lexer, out *DocumentsQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "offset":
			out.Offset = int64(in.Int64())
		case "limit":
			out.Limit = int64(in.Int64())
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]string, 0, 4)
					} else {
						out.Fields = []string{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v87 string
					v87 = string(in.String())
					out.Fields = append(out.Fields, v87)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo28(out *jwriter.Writer, in DocumentsQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Offset))
	}
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Limit))
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v88, v89 := range in.Fields {
				if v88 > 0 {
					out.RawByte(',')
				}
				out.String(string(v89))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DocumentsQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DocumentsQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DocumentsQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DocumentsQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo28(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo29(in *jlexer.Lexer, out *DocumentQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]string, 0, 4)
					} else {
						out.Fields = []string{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v90 string
					v90 = string(in.String())
					out.Fields = append(out.Fields, v90)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo29(out *jwriter.Writer, in DocumentQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v91, v92 := range in.Fields {
				if v91 > 0 {
					out.RawByte(',')
				}
				out.String(string(v92))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DocumentQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DocumentQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DocumentQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DocumentQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo29(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo30(in *jlexer.Lexer, out *Details) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "receivedDocuments":
			out.ReceivedDocuments = int(in.Int())
		case "indexedDocuments":
			out.IndexedDocuments = int(in.Int())
		case "deletedDocuments":
			out.DeletedDocuments = int(in.Int())
		case "primaryKey":
			out.PrimaryKey = string(in.String())
		case "rankingRules":
			if in.IsNull() {
				in.Skip()
				out.RankingRules = nil
			} else {
				in.Delim('[')
				if out.RankingRules == nil {
					if !in.IsDelim(']') {
						out.RankingRules = make([]string, 0, 4)
					} else {
						out.RankingRules = []string{}
					}
				} else {
					out.RankingRules = (out.RankingRules)[:0]
				}
				for !in.IsDelim(']') {
					var v93 string
					v93 = string(in.String())
					out.RankingRules = append(out.RankingRules, v93)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "distinctAttribute":
			if in.IsNull() {
				in.Skip()
				out.DistinctAttribute = nil
			} else {
				if out.DistinctAttribute == nil {
					out.DistinctAttribute = new(string)
				}
				*out.DistinctAttribute = string(in.String())
			}
		case "searchableAttributes":
			if in.IsNull() {
				in.Skip()
				out.SearchableAttributes = nil
			} else {
				in.Delim('[')
				if out.SearchableAttributes == nil {
					if !in.IsDelim(']') {
						out.SearchableAttributes = make([]string, 0, 4)
					} else {
						out.SearchableAttributes = []string{}
					}
				} else {
					out.SearchableAttributes = (out.SearchableAttributes)[:0]
				}
				for !in.IsDelim(']') {
					var v94 string
					v94 = string(in.String())
					out.SearchableAttributes = append(out.SearchableAttributes, v94)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "displayedAttributes":
			if in.IsNull() {
				in.Skip()
				out.DisplayedAttributes = nil
			} else {
				in.Delim('[')
				if out.DisplayedAttributes == nil {
					if !in.IsDelim(']') {
						out.DisplayedAttributes = make([]string, 0, 4)
					} else {
						out.DisplayedAttributes = []string{}
					}
				} else {
					out.DisplayedAttributes = (out.DisplayedAttributes)[:0]
				}
				for !in.IsDelim(']') {
					var v95 string
					v95 = string(in.String())
					out.DisplayedAttributes = append(out.DisplayedAttributes, v95)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "stopWords":
			if in.IsNull() {
				in.Skip()
				out.StopWords = nil
			} else {
				in.Delim('[')
				if out.StopWords == nil {
					if !in.IsDelim(']') {
						out.StopWords = make([]string, 0, 4)
					} else {
						out.StopWords = []string{}
					}
				} else {
					out.StopWords = (out.StopWords)[:0]
				}
				for !in.IsDelim(']') {
					var v96 string
					v96 = string(in.String())
					out.StopWords = append(out.StopWords, v96)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "synonyms":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Synonyms = make(map[string][]string)
				} else {
					out.Synonyms = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v97 []string
					if in.IsNull() {
						in.Skip()
						v97 = nil
					} else {
						in.Delim('[')
						if v97 == nil {
							if !in.IsDelim(']') {
								v97 = make([]string, 0, 4)
							} else {
								v97 = []string{}
							}
						} else {
							v97 = (v97)[:0]
						}
						for !in.IsDelim(']') {
							var v98 string
							v98 = string(in.String())
							v97 = append(v97, v98)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Synonyms)[key] = v97
					in.WantComma()
				}
				in.Delim('}')
			}
		case "filterableAttributes":
			if in.IsNull() {
				in.Skip()
				out.FilterableAttributes = nil
			} else {
				in.Delim('[')
				if out.FilterableAttributes == nil {
					if !in.IsDelim(']') {
						out.FilterableAttributes = make([]string, 0, 4)
					} else {
						out.FilterableAttributes = []string{}
					}
				} else {
					out.FilterableAttributes = (out.FilterableAttributes)[:0]
				}
				for !in.IsDelim(']') {
					var v99 string
					v99 = string(in.String())
					out.FilterableAttributes = append(out.FilterableAttributes, v99)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sortableAttributes":
			if in.IsNull() {
				in.Skip()
				out.SortableAttributes = nil
			} else {
				in.Delim('[')
				if out.SortableAttributes == nil {
					if !in.IsDelim(']') {
						out.SortableAttributes = make([]string, 0, 4)
					} else {
						out.SortableAttributes = []string{}
					}
				} else {
					out.SortableAttributes = (out.SortableAttributes)[:0]
				}
				for !in.IsDelim(']') {
					var v100 string
					v100 = string(in.String())
					out.SortableAttributes = append(out.SortableAttributes, v100)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo30(out *jwriter.Writer, in Details) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ReceivedDocuments != 0 {
		const prefix string = ",\"receivedDocuments\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ReceivedDocuments))
	}
	if in.IndexedDocuments != 0 {
		const prefix string = ",\"indexedDocuments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.IndexedDocuments))
	}
	if in.DeletedDocuments != 0 {
		const prefix string = ",\"deletedDocuments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DeletedDocuments))
	}
	if in.PrimaryKey != "" {
		const prefix string = ",\"primaryKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PrimaryKey))
	}
	if len(in.RankingRules) != 0 {
		const prefix string = ",\"rankingRules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v101, v102 := range in.RankingRules {
				if v101 > 0 {
					out.RawByte(',')
				}
				out.String(string(v102))
			}
			out.RawByte(']')
		}
	}
	if in.DistinctAttribute != nil {
		const prefix string = ",\"distinctAttribute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.DistinctAttribute))
	}
	if len(in.SearchableAttributes) != 0 {
		const prefix string = ",\"searchableAttributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v103, v104 := range in.SearchableAttributes {
				if v103 > 0 {
					out.RawByte(',')
				}
				out.String(string(v104))
			}
			out.RawByte(']')
		}
	}
	if len(in.DisplayedAttributes) != 0 {
		const prefix string = ",\"displayedAttributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v105, v106 := range in.DisplayedAttributes {
				if v105 > 0 {
					out.RawByte(',')
				}
				out.String(string(v106))
			}
			out.RawByte(']')
		}
	}
	if len(in.StopWords) != 0 {
		const prefix string = ",\"stopWords\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v107, v108 := range in.StopWords {
				if v107 > 0 {
					out.RawByte(',')
				}
				out.String(string(v108))
			}
			out.RawByte(']')
		}
	}
	if len(in.Synonyms) != 0 {
		const prefix string = ",\"synonyms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v109First := true
			for v109Name, v109Value := range in.Synonyms {
				if v109First {
					v109First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v109Name))
				out.RawByte(':')
				if v109Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v110, v111 := range v109Value {
						if v110 > 0 {
							out.RawByte(',')
						}
						out.String(string(v111))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.FilterableAttributes) != 0 {
		const prefix string = ",\"filterableAttributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v112, v113 := range in.FilterableAttributes {
				if v112 > 0 {
					out.RawByte(',')
				}
				out.String(string(v113))
			}
			out.RawByte(']')
		}
	}
	if len(in.SortableAttributes) != 0 {
		const prefix string = ",\"sortableAttributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v114, v115 := range in.SortableAttributes {
				if v114 > 0 {
					out.RawByte(',')
				}
				out.String(string(v115))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Details) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Details) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Details) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Details) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo30(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo31(in *jlexer.Lexer, out *CreateIndexRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.UID = string(in.String())
		case "primaryKey":
			out.PrimaryKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo31(out *jwriter.Writer, in CreateIndexRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UID != "" {
		const prefix string = ",\"uid\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.UID))
	}
	if in.PrimaryKey != "" {
		const prefix string = ",\"primaryKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PrimaryKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateIndexRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateIndexRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateIndexRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateIndexRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo31(l, v)
}
func easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo32(in *jlexer.Lexer, out *Client) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo32(out *jwriter.Writer, in Client) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Client) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Client) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComMeilisearchMeilisearchGo32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Client) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Client) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComMeilisearchMeilisearchGo32(l, v)
}
